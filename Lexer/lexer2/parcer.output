Conflict in state 43 between rule 20 and token EQUAL resolved as reduce.
Conflict in state 43 between rule 20 and token NOTEQUAL resolved as reduce.
Conflict in state 43 between rule 20 and token OR resolved as reduce.
Conflict in state 43 between rule 20 and token AND resolved as reduce.
Conflict in state 43 between rule 20 and token '=' resolved as reduce.
Conflict in state 43 between rule 20 and token '<' resolved as reduce.
Conflict in state 43 between rule 20 and token '>' resolved as reduce.
Conflict in state 43 between rule 20 and token '-' resolved as reduce.
Conflict in state 43 between rule 20 and token '+' resolved as reduce.
Conflict in state 43 between rule 20 and token '*' resolved as reduce.
Conflict in state 43 between rule 20 and token '/' resolved as reduce.
Conflict in state 43 between rule 20 and token '.' resolved as shift.
Conflict in state 43 between rule 20 and token '[' resolved as shift.
Conflict in state 44 between rule 18 and token EQUAL resolved as reduce.
Conflict in state 44 between rule 18 and token NOTEQUAL resolved as reduce.
Conflict in state 44 between rule 18 and token OR resolved as reduce.
Conflict in state 44 between rule 18 and token AND resolved as reduce.
Conflict in state 44 between rule 18 and token '=' resolved as reduce.
Conflict in state 44 between rule 18 and token '<' resolved as reduce.
Conflict in state 44 between rule 18 and token '>' resolved as reduce.
Conflict in state 44 between rule 18 and token '-' resolved as reduce.
Conflict in state 44 between rule 18 and token '+' resolved as reduce.
Conflict in state 44 between rule 18 and token '*' resolved as reduce.
Conflict in state 44 between rule 18 and token '/' resolved as reduce.
Conflict in state 44 between rule 18 and token '.' resolved as shift.
Conflict in state 44 between rule 18 and token '[' resolved as shift.
Conflict in state 101 between rule 14 and token EQUAL resolved as reduce.
Conflict in state 101 between rule 14 and token NOTEQUAL resolved as reduce.
Conflict in state 101 between rule 14 and token OR resolved as reduce.
Conflict in state 101 between rule 14 and token AND resolved as reduce.
Conflict in state 101 between rule 14 and token '=' resolved as shift.
Conflict in state 101 between rule 14 and token '<' resolved as shift.
Conflict in state 101 between rule 14 and token '>' resolved as shift.
Conflict in state 101 between rule 14 and token '-' resolved as shift.
Conflict in state 101 between rule 14 and token '+' resolved as shift.
Conflict in state 101 between rule 14 and token '*' resolved as shift.
Conflict in state 101 between rule 14 and token '/' resolved as shift.
Conflict in state 101 between rule 14 and token '.' resolved as shift.
Conflict in state 101 between rule 14 and token '[' resolved as shift.
Conflict in state 102 between rule 15 and token EQUAL resolved as reduce.
Conflict in state 102 between rule 15 and token NOTEQUAL resolved as reduce.
Conflict in state 102 between rule 15 and token OR resolved as reduce.
Conflict in state 102 between rule 15 and token AND resolved as reduce.
Conflict in state 102 between rule 15 and token '=' resolved as shift.
Conflict in state 102 between rule 15 and token '<' resolved as shift.
Conflict in state 102 between rule 15 and token '>' resolved as shift.
Conflict in state 102 between rule 15 and token '-' resolved as shift.
Conflict in state 102 between rule 15 and token '+' resolved as shift.
Conflict in state 102 between rule 15 and token '*' resolved as shift.
Conflict in state 102 between rule 15 and token '/' resolved as shift.
Conflict in state 102 between rule 15 and token '.' resolved as shift.
Conflict in state 102 between rule 15 and token '[' resolved as shift.
Conflict in state 103 between rule 16 and token EQUAL resolved as shift.
Conflict in state 103 between rule 16 and token NOTEQUAL resolved as shift.
Conflict in state 103 between rule 16 and token OR resolved as reduce.
Conflict in state 103 between rule 16 and token AND resolved as shift.
Conflict in state 103 between rule 16 and token '=' resolved as shift.
Conflict in state 103 between rule 16 and token '<' resolved as shift.
Conflict in state 103 between rule 16 and token '>' resolved as shift.
Conflict in state 103 between rule 16 and token '-' resolved as shift.
Conflict in state 103 between rule 16 and token '+' resolved as shift.
Conflict in state 103 between rule 16 and token '*' resolved as shift.
Conflict in state 103 between rule 16 and token '/' resolved as shift.
Conflict in state 103 between rule 16 and token '.' resolved as shift.
Conflict in state 103 between rule 16 and token '[' resolved as shift.
Conflict in state 104 between rule 17 and token EQUAL resolved as shift.
Conflict in state 104 between rule 17 and token NOTEQUAL resolved as shift.
Conflict in state 104 between rule 17 and token OR resolved as reduce.
Conflict in state 104 between rule 17 and token AND resolved as reduce.
Conflict in state 104 between rule 17 and token '=' resolved as shift.
Conflict in state 104 between rule 17 and token '<' resolved as shift.
Conflict in state 104 between rule 17 and token '>' resolved as shift.
Conflict in state 104 between rule 17 and token '-' resolved as shift.
Conflict in state 104 between rule 17 and token '+' resolved as shift.
Conflict in state 104 between rule 17 and token '*' resolved as shift.
Conflict in state 104 between rule 17 and token '/' resolved as shift.
Conflict in state 104 between rule 17 and token '.' resolved as shift.
Conflict in state 104 between rule 17 and token '[' resolved as shift.
Conflict in state 105 between rule 19 and token EQUAL resolved as reduce.
Conflict in state 105 between rule 19 and token NOTEQUAL resolved as reduce.
Conflict in state 105 between rule 19 and token OR resolved as reduce.
Conflict in state 105 between rule 19 and token AND resolved as reduce.
Conflict in state 105 between rule 19 and token '=' resolved as shift.
Conflict in state 105 between rule 19 and token '<' resolved as shift.
Conflict in state 105 between rule 19 and token '>' resolved as shift.
Conflict in state 105 between rule 19 and token '-' resolved as shift.
Conflict in state 105 between rule 19 and token '+' resolved as shift.
Conflict in state 105 between rule 19 and token '*' resolved as shift.
Conflict in state 105 between rule 19 and token '/' resolved as shift.
Conflict in state 105 between rule 19 and token '.' resolved as shift.
Conflict in state 105 between rule 19 and token '[' resolved as shift.
Conflict in state 106 between rule 12 and token EQUAL resolved as reduce.
Conflict in state 106 between rule 12 and token NOTEQUAL resolved as reduce.
Conflict in state 106 between rule 12 and token OR resolved as reduce.
Conflict in state 106 between rule 12 and token AND resolved as reduce.
Conflict in state 106 between rule 12 and token '=' resolved as reduce.
Conflict in state 106 between rule 12 and token '<' resolved as reduce.
Conflict in state 106 between rule 12 and token '>' resolved as reduce.
Conflict in state 106 between rule 12 and token '-' resolved as shift.
Conflict in state 106 between rule 12 and token '+' resolved as shift.
Conflict in state 106 between rule 12 and token '*' resolved as shift.
Conflict in state 106 between rule 12 and token '/' resolved as shift.
Conflict in state 106 between rule 12 and token '.' resolved as shift.
Conflict in state 106 between rule 12 and token '[' resolved as shift.
Conflict in state 107 between rule 13 and token EQUAL resolved as reduce.
Conflict in state 107 between rule 13 and token NOTEQUAL resolved as reduce.
Conflict in state 107 between rule 13 and token OR resolved as reduce.
Conflict in state 107 between rule 13 and token AND resolved as reduce.
Conflict in state 107 between rule 13 and token '=' resolved as reduce.
Conflict in state 107 between rule 13 and token '<' resolved as reduce.
Conflict in state 107 between rule 13 and token '>' resolved as reduce.
Conflict in state 107 between rule 13 and token '-' resolved as shift.
Conflict in state 107 between rule 13 and token '+' resolved as shift.
Conflict in state 107 between rule 13 and token '*' resolved as shift.
Conflict in state 107 between rule 13 and token '/' resolved as shift.
Conflict in state 107 between rule 13 and token '.' resolved as shift.
Conflict in state 107 between rule 13 and token '[' resolved as shift.
Conflict in state 108 between rule 9 and token EQUAL resolved as reduce.
Conflict in state 108 between rule 9 and token NOTEQUAL resolved as reduce.
Conflict in state 108 between rule 9 and token OR resolved as reduce.
Conflict in state 108 between rule 9 and token AND resolved as reduce.
Conflict in state 108 between rule 9 and token '=' resolved as reduce.
Conflict in state 108 between rule 9 and token '<' resolved as reduce.
Conflict in state 108 between rule 9 and token '>' resolved as reduce.
Conflict in state 108 between rule 9 and token '-' resolved as reduce.
Conflict in state 108 between rule 9 and token '+' resolved as reduce.
Conflict in state 108 between rule 9 and token '*' resolved as shift.
Conflict in state 108 between rule 9 and token '/' resolved as shift.
Conflict in state 108 between rule 9 and token '.' resolved as shift.
Conflict in state 108 between rule 9 and token '[' resolved as shift.
Conflict in state 109 between rule 8 and token EQUAL resolved as reduce.
Conflict in state 109 between rule 8 and token NOTEQUAL resolved as reduce.
Conflict in state 109 between rule 8 and token OR resolved as reduce.
Conflict in state 109 between rule 8 and token AND resolved as reduce.
Conflict in state 109 between rule 8 and token '=' resolved as reduce.
Conflict in state 109 between rule 8 and token '<' resolved as reduce.
Conflict in state 109 between rule 8 and token '>' resolved as reduce.
Conflict in state 109 between rule 8 and token '-' resolved as reduce.
Conflict in state 109 between rule 8 and token '+' resolved as reduce.
Conflict in state 109 between rule 8 and token '*' resolved as shift.
Conflict in state 109 between rule 8 and token '/' resolved as shift.
Conflict in state 109 between rule 8 and token '.' resolved as shift.
Conflict in state 109 between rule 8 and token '[' resolved as shift.
Conflict in state 110 between rule 10 and token EQUAL resolved as reduce.
Conflict in state 110 between rule 10 and token NOTEQUAL resolved as reduce.
Conflict in state 110 between rule 10 and token OR resolved as reduce.
Conflict in state 110 between rule 10 and token AND resolved as reduce.
Conflict in state 110 between rule 10 and token '=' resolved as reduce.
Conflict in state 110 between rule 10 and token '<' resolved as reduce.
Conflict in state 110 between rule 10 and token '>' resolved as reduce.
Conflict in state 110 between rule 10 and token '-' resolved as reduce.
Conflict in state 110 between rule 10 and token '+' resolved as reduce.
Conflict in state 110 between rule 10 and token '*' resolved as reduce.
Conflict in state 110 between rule 10 and token '/' resolved as reduce.
Conflict in state 110 between rule 10 and token '.' resolved as shift.
Conflict in state 110 between rule 10 and token '[' resolved as shift.
Conflict in state 111 between rule 11 and token EQUAL resolved as reduce.
Conflict in state 111 between rule 11 and token NOTEQUAL resolved as reduce.
Conflict in state 111 between rule 11 and token OR resolved as reduce.
Conflict in state 111 between rule 11 and token AND resolved as reduce.
Conflict in state 111 between rule 11 and token '=' resolved as reduce.
Conflict in state 111 between rule 11 and token '<' resolved as reduce.
Conflict in state 111 between rule 11 and token '>' resolved as reduce.
Conflict in state 111 between rule 11 and token '-' resolved as reduce.
Conflict in state 111 between rule 11 and token '+' resolved as reduce.
Conflict in state 111 between rule 11 and token '*' resolved as reduce.
Conflict in state 111 between rule 11 and token '/' resolved as reduce.
Conflict in state 111 between rule 11 and token '.' resolved as shift.
Conflict in state 111 between rule 11 and token '[' resolved as shift.
State 21 contains 1 shift/reduce conflict.

Grammar
rule 1    program -> stmt_seq
rule 2    eln ->		/* empty */
rule 3    eln -> EOL
rule 4    id -> ID_CAP
rule 5    id -> ID_LOW
rule 6    id -> ID_FUNC
rule 7    id -> ID_VAR_FIELD
rule 8    expr -> expr '+' eln expr
rule 9    expr -> expr '-' eln expr
rule 10   expr -> expr '*' eln expr
rule 11   expr -> expr '/' eln expr
rule 12   expr -> expr '<' eln expr
rule 13   expr -> expr '>' eln expr
rule 14   expr -> expr EQUAL eln expr
rule 15   expr -> expr NOTEQUAL eln expr
rule 16   expr -> expr OR eln expr
rule 17   expr -> expr AND eln expr
rule 18   expr -> '!' expr
rule 19   expr -> expr '=' eln expr
rule 20   expr -> '-' expr
rule 21   expr -> '(' eln expr eln ')'
rule 22   expr -> expr '[' eln expr eln ']'
rule 23   expr -> '[' eln expr_seq eln ']'
rule 24   expr -> INT
rule 25   expr -> STRING
rule 26   expr -> id
rule 27   expr -> NIL
rule 28   expr -> TRUE
rule 29   expr -> FALSE
rule 30   expr -> expr '.' id
rule 31   expr -> expr '.' id '(' expr_seq ')'
rule 32   expr -> SELF
rule 33   expr -> SUPER
rule 34   expr_seq ->		/* empty */
rule 35   expr_seq -> expr_seqE
rule 36   expr_seqE -> expr
rule 37   expr_seqE -> expr_seq ',' expr
rule 38   stmt ->		/* empty */
rule 39   stmt -> expr
rule 40   stmt -> method_def
rule 41   stmt -> class_def
rule 42   stmt -> while_stmt
rule 43   stmt -> until_stmt
rule 44   stmt -> RETURN expr_seq
rule 45   stmt -> if_stmt
rule 46   stmt -> unless_stmt
rule 47   stmt_seq -> stmt
rule 48   stmt_seq -> stmt_seq EOL stmt
rule 49   method_def -> DEF eln id '(' method_def_param_seq eln ')' stmt_seq END
rule 50   method_def -> DEF eln id method_def_param_seq EOL stmt_seq END
rule 51   method_def_param_seq ->		/* empty */
rule 52   method_def_param_seq -> method_def_param_seqE
rule 53   method_def_param_seqE -> ID_LOW
rule 54   method_def_param_seqE -> method_def_param_seq ',' eln ID_LOW
rule 55   while_stmt -> WHILE eln expr DO stmt_seq END
rule 56   while_stmt -> WHILE eln '(' eln expr eln ')' EOL stmt_seq END
rule 57   until_stmt -> UNTIL eln expr DO stmt_seq END
rule 58   until_stmt -> UNTIL eln '(' eln expr eln ')' EOL stmt_seq END
rule 59   elsif_seq ->		/* empty */
rule 60   elsif_seq -> elsif_seqE
rule 61   elsif_seqE -> ELSIF expr THEN stmt_seq
rule 62   elsif_seqE -> elsif_seqE ELSIF expr THEN stmt_seq
rule 63   if_stmt -> IF eln expr eln THEN stmt_seq elsif_seq END
rule 64   if_stmt -> IF eln expr eln THEN stmt_seq elsif_seq ELSE stmt_seq END
rule 65   unless_stmt -> UNLESS eln expr eln THEN stmt_seq END
rule 66   unless_stmt -> UNLESS eln expr eln THEN stmt_seq ELSE stmt_seq END
rule 67   class_def -> CLASS eln ID_CAP '<' eln ID_CAP EOL stmt_seq END
rule 68   class_def -> CLASS eln ID_CAP EOL stmt_seq END

Terminals, with rules where they appear

$ (-1)
'!' (33) 18
'(' (40) 21 31 49 56 58
')' (41) 21 31 49 56 58
'*' (42) 10
'+' (43) 8
',' (44) 37 54
'-' (45) 9 20
'.' (46) 30 31
'/' (47) 11
'<' (60) 12 67
'=' (61) 19
'>' (62) 13
'[' (91) 22 23
']' (93) 22 23
error (256)
INT (258) 24
STRING (259) 25
EOL (260) 3 48 50 56 58 67 68
DEF (261) 49 50
END (262) 49 50 55 56 57 58 63 64 65 66 67 68
WHILE (263) 55 56
DO (264) 55 57
UNTIL (265) 57 58
CLASS (266) 67 68
SELF (267) 32
SUPER (268) 33
RETURN (269) 44
ID_CAP (270) 4 67 68
ID_LOW (271) 5 53 54
ID_FUNC (272) 6
ID_VAR_FIELD (273) 7
EQUAL (274) 14
NOTEQUAL (275) 15
OR (276) 16
AND (277) 17
NIL (278) 27
TRUE (279) 28
FALSE (280) 29
IF (281) 63 64
ELSIF (282) 61 62
ELSE (283) 64 66
UNLESS (284) 65 66
THEN (285) 61 62 63 64 65 66
UMINUS (286)
UBR (287)

Nonterminals, with rules where they appear

program (47)
    on left: 1
eln (48)
    on left: 2 3, on right: 8 9 10 11 12 13 14 15 16 17 19 21 22 23
    49 50 54 55 56 57 58 63 64 65 66 67 68
id (49)
    on left: 4 5 6 7, on right: 26 30 31 49 50
expr (50)
    on left: 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26
    27 28 29 30 31 32 33, on right: 8 9 10 11 12 13 14 15 16 17 18
    19 20 21 22 30 31 36 37 39 55 56 57 58 61 62 63 64 65 66
expr_seq (51)
    on left: 34 35, on right: 23 31 37 44
expr_seqE (52)
    on left: 36 37, on right: 35
stmt (53)
    on left: 38 39 40 41 42 43 44 45 46, on right: 47 48
stmt_seq (54)
    on left: 47 48, on right: 1 48 49 50 55 56 57 58 61 62 63 64 65
    66 67 68
method_def (55)
    on left: 49 50, on right: 40
method_def_param_seq (56)
    on left: 51 52, on right: 49 50 54
method_def_param_seqE (57)
    on left: 53 54, on right: 52
while_stmt (58)
    on left: 55 56, on right: 42
until_stmt (59)
    on left: 57 58, on right: 43
elsif_seq (60)
    on left: 59 60, on right: 63 64
elsif_seqE (61)
    on left: 61 62, on right: 60 62
if_stmt (62)
    on left: 63 64, on right: 45
unless_stmt (63)
    on left: 65 66, on right: 46
class_def (64)
    on left: 67 68, on right: 41


state 0

    INT 	shift, and go to state 1
    STRING	shift, and go to state 2
    DEF 	shift, and go to state 3
    WHILE	shift, and go to state 4
    UNTIL	shift, and go to state 5
    CLASS	shift, and go to state 6
    SELF	shift, and go to state 7
    SUPER	shift, and go to state 8
    RETURN	shift, and go to state 9
    ID_CAP	shift, and go to state 10
    ID_LOW	shift, and go to state 11
    ID_FUNC	shift, and go to state 12
    ID_VAR_FIELD	shift, and go to state 13
    NIL 	shift, and go to state 14
    TRUE	shift, and go to state 15
    FALSE	shift, and go to state 16
    IF  	shift, and go to state 17
    UNLESS	shift, and go to state 18
    '-' 	shift, and go to state 19
    '!' 	shift, and go to state 20
    '[' 	shift, and go to state 21
    '(' 	shift, and go to state 22

    $default	reduce using rule 38 (stmt)

    program	go to state 176
    id  	go to state 23
    expr	go to state 24
    stmt	go to state 25
    stmt_seq	go to state 26
    method_def	go to state 27
    while_stmt	go to state 28
    until_stmt	go to state 29
    if_stmt	go to state 30
    unless_stmt	go to state 31
    class_def	go to state 32



state 1

    expr  ->  INT .   (rule 24)

    $default	reduce using rule 24 (expr)



state 2

    expr  ->  STRING .   (rule 25)

    $default	reduce using rule 25 (expr)



state 3

    method_def  ->  DEF . eln id '(' method_def_param_seq eln ')' stmt_seq END   (rule 49)
    method_def  ->  DEF . eln id method_def_param_seq EOL stmt_seq END   (rule 50)

    EOL 	shift, and go to state 33

    $default	reduce using rule 2 (eln)

    eln 	go to state 34



state 4

    while_stmt  ->  WHILE . eln expr DO stmt_seq END   (rule 55)
    while_stmt  ->  WHILE . eln '(' eln expr eln ')' EOL stmt_seq END   (rule 56)

    EOL 	shift, and go to state 33

    $default	reduce using rule 2 (eln)

    eln 	go to state 35



state 5

    until_stmt  ->  UNTIL . eln expr DO stmt_seq END   (rule 57)
    until_stmt  ->  UNTIL . eln '(' eln expr eln ')' EOL stmt_seq END   (rule 58)

    EOL 	shift, and go to state 33

    $default	reduce using rule 2 (eln)

    eln 	go to state 36



state 6

    class_def  ->  CLASS . eln ID_CAP '<' eln ID_CAP EOL stmt_seq END   (rule 67)
    class_def  ->  CLASS . eln ID_CAP EOL stmt_seq END   (rule 68)

    EOL 	shift, and go to state 33

    $default	reduce using rule 2 (eln)

    eln 	go to state 37



state 7

    expr  ->  SELF .   (rule 32)

    $default	reduce using rule 32 (expr)



state 8

    expr  ->  SUPER .   (rule 33)

    $default	reduce using rule 33 (expr)



state 9

    stmt  ->  RETURN . expr_seq   (rule 44)

    INT 	shift, and go to state 1
    STRING	shift, and go to state 2
    SELF	shift, and go to state 7
    SUPER	shift, and go to state 8
    ID_CAP	shift, and go to state 10
    ID_LOW	shift, and go to state 11
    ID_FUNC	shift, and go to state 12
    ID_VAR_FIELD	shift, and go to state 13
    NIL 	shift, and go to state 14
    TRUE	shift, and go to state 15
    FALSE	shift, and go to state 16
    '-' 	shift, and go to state 19
    '!' 	shift, and go to state 20
    '[' 	shift, and go to state 21
    '(' 	shift, and go to state 22

    $default	reduce using rule 34 (expr_seq)

    id  	go to state 23
    expr	go to state 38
    expr_seq	go to state 39
    expr_seqE	go to state 40



state 10

    id  ->  ID_CAP .   (rule 4)

    $default	reduce using rule 4 (id)



state 11

    id  ->  ID_LOW .   (rule 5)

    $default	reduce using rule 5 (id)



state 12

    id  ->  ID_FUNC .   (rule 6)

    $default	reduce using rule 6 (id)



state 13

    id  ->  ID_VAR_FIELD .   (rule 7)

    $default	reduce using rule 7 (id)



state 14

    expr  ->  NIL .   (rule 27)

    $default	reduce using rule 27 (expr)



state 15

    expr  ->  TRUE .   (rule 28)

    $default	reduce using rule 28 (expr)



state 16

    expr  ->  FALSE .   (rule 29)

    $default	reduce using rule 29 (expr)



state 17

    if_stmt  ->  IF . eln expr eln THEN stmt_seq elsif_seq END   (rule 63)
    if_stmt  ->  IF . eln expr eln THEN stmt_seq elsif_seq ELSE stmt_seq END   (rule 64)

    EOL 	shift, and go to state 33

    $default	reduce using rule 2 (eln)

    eln 	go to state 41



state 18

    unless_stmt  ->  UNLESS . eln expr eln THEN stmt_seq END   (rule 65)
    unless_stmt  ->  UNLESS . eln expr eln THEN stmt_seq ELSE stmt_seq END   (rule 66)

    EOL 	shift, and go to state 33

    $default	reduce using rule 2 (eln)

    eln 	go to state 42



state 19

    expr  ->  '-' . expr   (rule 20)

    INT 	shift, and go to state 1
    STRING	shift, and go to state 2
    SELF	shift, and go to state 7
    SUPER	shift, and go to state 8
    ID_CAP	shift, and go to state 10
    ID_LOW	shift, and go to state 11
    ID_FUNC	shift, and go to state 12
    ID_VAR_FIELD	shift, and go to state 13
    NIL 	shift, and go to state 14
    TRUE	shift, and go to state 15
    FALSE	shift, and go to state 16
    '-' 	shift, and go to state 19
    '!' 	shift, and go to state 20
    '[' 	shift, and go to state 21
    '(' 	shift, and go to state 22

    id  	go to state 23
    expr	go to state 43



state 20

    expr  ->  '!' . expr   (rule 18)

    INT 	shift, and go to state 1
    STRING	shift, and go to state 2
    SELF	shift, and go to state 7
    SUPER	shift, and go to state 8
    ID_CAP	shift, and go to state 10
    ID_LOW	shift, and go to state 11
    ID_FUNC	shift, and go to state 12
    ID_VAR_FIELD	shift, and go to state 13
    NIL 	shift, and go to state 14
    TRUE	shift, and go to state 15
    FALSE	shift, and go to state 16
    '-' 	shift, and go to state 19
    '!' 	shift, and go to state 20
    '[' 	shift, and go to state 21
    '(' 	shift, and go to state 22

    id  	go to state 23
    expr	go to state 44



state 21

    expr  ->  '[' . eln expr_seq eln ']'   (rule 23)

    EOL 	shift, and go to state 33

    EOL 	[reduce using rule 2 (eln)]
    $default	reduce using rule 2 (eln)

    eln 	go to state 45



state 22

    expr  ->  '(' . eln expr eln ')'   (rule 21)

    EOL 	shift, and go to state 33

    $default	reduce using rule 2 (eln)

    eln 	go to state 46



state 23

    expr  ->  id .   (rule 26)

    $default	reduce using rule 26 (expr)



state 24

    expr  ->  expr . '+' eln expr   (rule 8)
    expr  ->  expr . '-' eln expr   (rule 9)
    expr  ->  expr . '*' eln expr   (rule 10)
    expr  ->  expr . '/' eln expr   (rule 11)
    expr  ->  expr . '<' eln expr   (rule 12)
    expr  ->  expr . '>' eln expr   (rule 13)
    expr  ->  expr . EQUAL eln expr   (rule 14)
    expr  ->  expr . NOTEQUAL eln expr   (rule 15)
    expr  ->  expr . OR eln expr   (rule 16)
    expr  ->  expr . AND eln expr   (rule 17)
    expr  ->  expr . '=' eln expr   (rule 19)
    expr  ->  expr . '[' eln expr eln ']'   (rule 22)
    expr  ->  expr . '.' id   (rule 30)
    expr  ->  expr . '.' id '(' expr_seq ')'   (rule 31)
    stmt  ->  expr .   (rule 39)

    EQUAL	shift, and go to state 47
    NOTEQUAL	shift, and go to state 48
    OR  	shift, and go to state 49
    AND 	shift, and go to state 50
    '=' 	shift, and go to state 51
    '<' 	shift, and go to state 52
    '>' 	shift, and go to state 53
    '-' 	shift, and go to state 54
    '+' 	shift, and go to state 55
    '*' 	shift, and go to state 56
    '/' 	shift, and go to state 57
    '.' 	shift, and go to state 58
    '[' 	shift, and go to state 59

    $default	reduce using rule 39 (stmt)



state 25

    stmt_seq  ->  stmt .   (rule 47)

    $default	reduce using rule 47 (stmt_seq)



state 26

    program  ->  stmt_seq .   (rule 1)
    stmt_seq  ->  stmt_seq . EOL stmt   (rule 48)

    EOL 	shift, and go to state 60

    $default	reduce using rule 1 (program)



state 27

    stmt  ->  method_def .   (rule 40)

    $default	reduce using rule 40 (stmt)



state 28

    stmt  ->  while_stmt .   (rule 42)

    $default	reduce using rule 42 (stmt)



state 29

    stmt  ->  until_stmt .   (rule 43)

    $default	reduce using rule 43 (stmt)



state 30

    stmt  ->  if_stmt .   (rule 45)

    $default	reduce using rule 45 (stmt)



state 31

    stmt  ->  unless_stmt .   (rule 46)

    $default	reduce using rule 46 (stmt)



state 32

    stmt  ->  class_def .   (rule 41)

    $default	reduce using rule 41 (stmt)



state 33

    eln  ->  EOL .   (rule 3)

    $default	reduce using rule 3 (eln)



state 34

    method_def  ->  DEF eln . id '(' method_def_param_seq eln ')' stmt_seq END   (rule 49)
    method_def  ->  DEF eln . id method_def_param_seq EOL stmt_seq END   (rule 50)

    ID_CAP	shift, and go to state 10
    ID_LOW	shift, and go to state 11
    ID_FUNC	shift, and go to state 12
    ID_VAR_FIELD	shift, and go to state 13

    id  	go to state 61



state 35

    while_stmt  ->  WHILE eln . expr DO stmt_seq END   (rule 55)
    while_stmt  ->  WHILE eln . '(' eln expr eln ')' EOL stmt_seq END   (rule 56)

    INT 	shift, and go to state 1
    STRING	shift, and go to state 2
    SELF	shift, and go to state 7
    SUPER	shift, and go to state 8
    ID_CAP	shift, and go to state 10
    ID_LOW	shift, and go to state 11
    ID_FUNC	shift, and go to state 12
    ID_VAR_FIELD	shift, and go to state 13
    NIL 	shift, and go to state 14
    TRUE	shift, and go to state 15
    FALSE	shift, and go to state 16
    '-' 	shift, and go to state 19
    '!' 	shift, and go to state 20
    '[' 	shift, and go to state 21
    '(' 	shift, and go to state 62

    id  	go to state 23
    expr	go to state 63



state 36

    until_stmt  ->  UNTIL eln . expr DO stmt_seq END   (rule 57)
    until_stmt  ->  UNTIL eln . '(' eln expr eln ')' EOL stmt_seq END   (rule 58)

    INT 	shift, and go to state 1
    STRING	shift, and go to state 2
    SELF	shift, and go to state 7
    SUPER	shift, and go to state 8
    ID_CAP	shift, and go to state 10
    ID_LOW	shift, and go to state 11
    ID_FUNC	shift, and go to state 12
    ID_VAR_FIELD	shift, and go to state 13
    NIL 	shift, and go to state 14
    TRUE	shift, and go to state 15
    FALSE	shift, and go to state 16
    '-' 	shift, and go to state 19
    '!' 	shift, and go to state 20
    '[' 	shift, and go to state 21
    '(' 	shift, and go to state 64

    id  	go to state 23
    expr	go to state 65



state 37

    class_def  ->  CLASS eln . ID_CAP '<' eln ID_CAP EOL stmt_seq END   (rule 67)
    class_def  ->  CLASS eln . ID_CAP EOL stmt_seq END   (rule 68)

    ID_CAP	shift, and go to state 66



state 38

    expr  ->  expr . '+' eln expr   (rule 8)
    expr  ->  expr . '-' eln expr   (rule 9)
    expr  ->  expr . '*' eln expr   (rule 10)
    expr  ->  expr . '/' eln expr   (rule 11)
    expr  ->  expr . '<' eln expr   (rule 12)
    expr  ->  expr . '>' eln expr   (rule 13)
    expr  ->  expr . EQUAL eln expr   (rule 14)
    expr  ->  expr . NOTEQUAL eln expr   (rule 15)
    expr  ->  expr . OR eln expr   (rule 16)
    expr  ->  expr . AND eln expr   (rule 17)
    expr  ->  expr . '=' eln expr   (rule 19)
    expr  ->  expr . '[' eln expr eln ']'   (rule 22)
    expr  ->  expr . '.' id   (rule 30)
    expr  ->  expr . '.' id '(' expr_seq ')'   (rule 31)
    expr_seqE  ->  expr .   (rule 36)

    EQUAL	shift, and go to state 47
    NOTEQUAL	shift, and go to state 48
    OR  	shift, and go to state 49
    AND 	shift, and go to state 50
    '=' 	shift, and go to state 51
    '<' 	shift, and go to state 52
    '>' 	shift, and go to state 53
    '-' 	shift, and go to state 54
    '+' 	shift, and go to state 55
    '*' 	shift, and go to state 56
    '/' 	shift, and go to state 57
    '.' 	shift, and go to state 58
    '[' 	shift, and go to state 59

    $default	reduce using rule 36 (expr_seqE)



state 39

    expr_seqE  ->  expr_seq . ',' expr   (rule 37)
    stmt  ->  RETURN expr_seq .   (rule 44)

    ',' 	shift, and go to state 67

    $default	reduce using rule 44 (stmt)



state 40

    expr_seq  ->  expr_seqE .   (rule 35)

    $default	reduce using rule 35 (expr_seq)



state 41

    if_stmt  ->  IF eln . expr eln THEN stmt_seq elsif_seq END   (rule 63)
    if_stmt  ->  IF eln . expr eln THEN stmt_seq elsif_seq ELSE stmt_seq END   (rule 64)

    INT 	shift, and go to state 1
    STRING	shift, and go to state 2
    SELF	shift, and go to state 7
    SUPER	shift, and go to state 8
    ID_CAP	shift, and go to state 10
    ID_LOW	shift, and go to state 11
    ID_FUNC	shift, and go to state 12
    ID_VAR_FIELD	shift, and go to state 13
    NIL 	shift, and go to state 14
    TRUE	shift, and go to state 15
    FALSE	shift, and go to state 16
    '-' 	shift, and go to state 19
    '!' 	shift, and go to state 20
    '[' 	shift, and go to state 21
    '(' 	shift, and go to state 22

    id  	go to state 23
    expr	go to state 68



state 42

    unless_stmt  ->  UNLESS eln . expr eln THEN stmt_seq END   (rule 65)
    unless_stmt  ->  UNLESS eln . expr eln THEN stmt_seq ELSE stmt_seq END   (rule 66)

    INT 	shift, and go to state 1
    STRING	shift, and go to state 2
    SELF	shift, and go to state 7
    SUPER	shift, and go to state 8
    ID_CAP	shift, and go to state 10
    ID_LOW	shift, and go to state 11
    ID_FUNC	shift, and go to state 12
    ID_VAR_FIELD	shift, and go to state 13
    NIL 	shift, and go to state 14
    TRUE	shift, and go to state 15
    FALSE	shift, and go to state 16
    '-' 	shift, and go to state 19
    '!' 	shift, and go to state 20
    '[' 	shift, and go to state 21
    '(' 	shift, and go to state 22

    id  	go to state 23
    expr	go to state 69



state 43

    expr  ->  expr . '+' eln expr   (rule 8)
    expr  ->  expr . '-' eln expr   (rule 9)
    expr  ->  expr . '*' eln expr   (rule 10)
    expr  ->  expr . '/' eln expr   (rule 11)
    expr  ->  expr . '<' eln expr   (rule 12)
    expr  ->  expr . '>' eln expr   (rule 13)
    expr  ->  expr . EQUAL eln expr   (rule 14)
    expr  ->  expr . NOTEQUAL eln expr   (rule 15)
    expr  ->  expr . OR eln expr   (rule 16)
    expr  ->  expr . AND eln expr   (rule 17)
    expr  ->  expr . '=' eln expr   (rule 19)
    expr  ->  '-' expr .   (rule 20)
    expr  ->  expr . '[' eln expr eln ']'   (rule 22)
    expr  ->  expr . '.' id   (rule 30)
    expr  ->  expr . '.' id '(' expr_seq ')'   (rule 31)

    '.' 	shift, and go to state 58
    '[' 	shift, and go to state 59

    $default	reduce using rule 20 (expr)



state 44

    expr  ->  expr . '+' eln expr   (rule 8)
    expr  ->  expr . '-' eln expr   (rule 9)
    expr  ->  expr . '*' eln expr   (rule 10)
    expr  ->  expr . '/' eln expr   (rule 11)
    expr  ->  expr . '<' eln expr   (rule 12)
    expr  ->  expr . '>' eln expr   (rule 13)
    expr  ->  expr . EQUAL eln expr   (rule 14)
    expr  ->  expr . NOTEQUAL eln expr   (rule 15)
    expr  ->  expr . OR eln expr   (rule 16)
    expr  ->  expr . AND eln expr   (rule 17)
    expr  ->  '!' expr .   (rule 18)
    expr  ->  expr . '=' eln expr   (rule 19)
    expr  ->  expr . '[' eln expr eln ']'   (rule 22)
    expr  ->  expr . '.' id   (rule 30)
    expr  ->  expr . '.' id '(' expr_seq ')'   (rule 31)

    '.' 	shift, and go to state 58
    '[' 	shift, and go to state 59

    $default	reduce using rule 18 (expr)



state 45

    expr  ->  '[' eln . expr_seq eln ']'   (rule 23)

    INT 	shift, and go to state 1
    STRING	shift, and go to state 2
    SELF	shift, and go to state 7
    SUPER	shift, and go to state 8
    ID_CAP	shift, and go to state 10
    ID_LOW	shift, and go to state 11
    ID_FUNC	shift, and go to state 12
    ID_VAR_FIELD	shift, and go to state 13
    NIL 	shift, and go to state 14
    TRUE	shift, and go to state 15
    FALSE	shift, and go to state 16
    '-' 	shift, and go to state 19
    '!' 	shift, and go to state 20
    '[' 	shift, and go to state 21
    '(' 	shift, and go to state 22

    $default	reduce using rule 34 (expr_seq)

    id  	go to state 23
    expr	go to state 38
    expr_seq	go to state 70
    expr_seqE	go to state 40



state 46

    expr  ->  '(' eln . expr eln ')'   (rule 21)

    INT 	shift, and go to state 1
    STRING	shift, and go to state 2
    SELF	shift, and go to state 7
    SUPER	shift, and go to state 8
    ID_CAP	shift, and go to state 10
    ID_LOW	shift, and go to state 11
    ID_FUNC	shift, and go to state 12
    ID_VAR_FIELD	shift, and go to state 13
    NIL 	shift, and go to state 14
    TRUE	shift, and go to state 15
    FALSE	shift, and go to state 16
    '-' 	shift, and go to state 19
    '!' 	shift, and go to state 20
    '[' 	shift, and go to state 21
    '(' 	shift, and go to state 22

    id  	go to state 23
    expr	go to state 71



state 47

    expr  ->  expr EQUAL . eln expr   (rule 14)

    EOL 	shift, and go to state 33

    $default	reduce using rule 2 (eln)

    eln 	go to state 72



state 48

    expr  ->  expr NOTEQUAL . eln expr   (rule 15)

    EOL 	shift, and go to state 33

    $default	reduce using rule 2 (eln)

    eln 	go to state 73



state 49

    expr  ->  expr OR . eln expr   (rule 16)

    EOL 	shift, and go to state 33

    $default	reduce using rule 2 (eln)

    eln 	go to state 74



state 50

    expr  ->  expr AND . eln expr   (rule 17)

    EOL 	shift, and go to state 33

    $default	reduce using rule 2 (eln)

    eln 	go to state 75



state 51

    expr  ->  expr '=' . eln expr   (rule 19)

    EOL 	shift, and go to state 33

    $default	reduce using rule 2 (eln)

    eln 	go to state 76



state 52

    expr  ->  expr '<' . eln expr   (rule 12)

    EOL 	shift, and go to state 33

    $default	reduce using rule 2 (eln)

    eln 	go to state 77



state 53

    expr  ->  expr '>' . eln expr   (rule 13)

    EOL 	shift, and go to state 33

    $default	reduce using rule 2 (eln)

    eln 	go to state 78



state 54

    expr  ->  expr '-' . eln expr   (rule 9)

    EOL 	shift, and go to state 33

    $default	reduce using rule 2 (eln)

    eln 	go to state 79



state 55

    expr  ->  expr '+' . eln expr   (rule 8)

    EOL 	shift, and go to state 33

    $default	reduce using rule 2 (eln)

    eln 	go to state 80



state 56

    expr  ->  expr '*' . eln expr   (rule 10)

    EOL 	shift, and go to state 33

    $default	reduce using rule 2 (eln)

    eln 	go to state 81



state 57

    expr  ->  expr '/' . eln expr   (rule 11)

    EOL 	shift, and go to state 33

    $default	reduce using rule 2 (eln)

    eln 	go to state 82



state 58

    expr  ->  expr '.' . id   (rule 30)
    expr  ->  expr '.' . id '(' expr_seq ')'   (rule 31)

    ID_CAP	shift, and go to state 10
    ID_LOW	shift, and go to state 11
    ID_FUNC	shift, and go to state 12
    ID_VAR_FIELD	shift, and go to state 13

    id  	go to state 83



state 59

    expr  ->  expr '[' . eln expr eln ']'   (rule 22)

    EOL 	shift, and go to state 33

    $default	reduce using rule 2 (eln)

    eln 	go to state 84



state 60

    stmt_seq  ->  stmt_seq EOL . stmt   (rule 48)

    INT 	shift, and go to state 1
    STRING	shift, and go to state 2
    DEF 	shift, and go to state 3
    WHILE	shift, and go to state 4
    UNTIL	shift, and go to state 5
    CLASS	shift, and go to state 6
    SELF	shift, and go to state 7
    SUPER	shift, and go to state 8
    RETURN	shift, and go to state 9
    ID_CAP	shift, and go to state 10
    ID_LOW	shift, and go to state 11
    ID_FUNC	shift, and go to state 12
    ID_VAR_FIELD	shift, and go to state 13
    NIL 	shift, and go to state 14
    TRUE	shift, and go to state 15
    FALSE	shift, and go to state 16
    IF  	shift, and go to state 17
    UNLESS	shift, and go to state 18
    '-' 	shift, and go to state 19
    '!' 	shift, and go to state 20
    '[' 	shift, and go to state 21
    '(' 	shift, and go to state 22

    $default	reduce using rule 38 (stmt)

    id  	go to state 23
    expr	go to state 24
    stmt	go to state 85
    method_def	go to state 27
    while_stmt	go to state 28
    until_stmt	go to state 29
    if_stmt	go to state 30
    unless_stmt	go to state 31
    class_def	go to state 32



state 61

    method_def  ->  DEF eln id . '(' method_def_param_seq eln ')' stmt_seq END   (rule 49)
    method_def  ->  DEF eln id . method_def_param_seq EOL stmt_seq END   (rule 50)

    ID_LOW	shift, and go to state 86
    '(' 	shift, and go to state 87

    $default	reduce using rule 51 (method_def_param_seq)

    method_def_param_seq	go to state 88
    method_def_param_seqE	go to state 89



state 62

    expr  ->  '(' . eln expr eln ')'   (rule 21)
    while_stmt  ->  WHILE eln '(' . eln expr eln ')' EOL stmt_seq END   (rule 56)

    EOL 	shift, and go to state 33

    $default	reduce using rule 2 (eln)

    eln 	go to state 90



state 63

    expr  ->  expr . '+' eln expr   (rule 8)
    expr  ->  expr . '-' eln expr   (rule 9)
    expr  ->  expr . '*' eln expr   (rule 10)
    expr  ->  expr . '/' eln expr   (rule 11)
    expr  ->  expr . '<' eln expr   (rule 12)
    expr  ->  expr . '>' eln expr   (rule 13)
    expr  ->  expr . EQUAL eln expr   (rule 14)
    expr  ->  expr . NOTEQUAL eln expr   (rule 15)
    expr  ->  expr . OR eln expr   (rule 16)
    expr  ->  expr . AND eln expr   (rule 17)
    expr  ->  expr . '=' eln expr   (rule 19)
    expr  ->  expr . '[' eln expr eln ']'   (rule 22)
    expr  ->  expr . '.' id   (rule 30)
    expr  ->  expr . '.' id '(' expr_seq ')'   (rule 31)
    while_stmt  ->  WHILE eln expr . DO stmt_seq END   (rule 55)

    DO  	shift, and go to state 91
    EQUAL	shift, and go to state 47
    NOTEQUAL	shift, and go to state 48
    OR  	shift, and go to state 49
    AND 	shift, and go to state 50
    '=' 	shift, and go to state 51
    '<' 	shift, and go to state 52
    '>' 	shift, and go to state 53
    '-' 	shift, and go to state 54
    '+' 	shift, and go to state 55
    '*' 	shift, and go to state 56
    '/' 	shift, and go to state 57
    '.' 	shift, and go to state 58
    '[' 	shift, and go to state 59



state 64

    expr  ->  '(' . eln expr eln ')'   (rule 21)
    until_stmt  ->  UNTIL eln '(' . eln expr eln ')' EOL stmt_seq END   (rule 58)

    EOL 	shift, and go to state 33

    $default	reduce using rule 2 (eln)

    eln 	go to state 92



state 65

    expr  ->  expr . '+' eln expr   (rule 8)
    expr  ->  expr . '-' eln expr   (rule 9)
    expr  ->  expr . '*' eln expr   (rule 10)
    expr  ->  expr . '/' eln expr   (rule 11)
    expr  ->  expr . '<' eln expr   (rule 12)
    expr  ->  expr . '>' eln expr   (rule 13)
    expr  ->  expr . EQUAL eln expr   (rule 14)
    expr  ->  expr . NOTEQUAL eln expr   (rule 15)
    expr  ->  expr . OR eln expr   (rule 16)
    expr  ->  expr . AND eln expr   (rule 17)
    expr  ->  expr . '=' eln expr   (rule 19)
    expr  ->  expr . '[' eln expr eln ']'   (rule 22)
    expr  ->  expr . '.' id   (rule 30)
    expr  ->  expr . '.' id '(' expr_seq ')'   (rule 31)
    until_stmt  ->  UNTIL eln expr . DO stmt_seq END   (rule 57)

    DO  	shift, and go to state 93
    EQUAL	shift, and go to state 47
    NOTEQUAL	shift, and go to state 48
    OR  	shift, and go to state 49
    AND 	shift, and go to state 50
    '=' 	shift, and go to state 51
    '<' 	shift, and go to state 52
    '>' 	shift, and go to state 53
    '-' 	shift, and go to state 54
    '+' 	shift, and go to state 55
    '*' 	shift, and go to state 56
    '/' 	shift, and go to state 57
    '.' 	shift, and go to state 58
    '[' 	shift, and go to state 59



state 66

    class_def  ->  CLASS eln ID_CAP . '<' eln ID_CAP EOL stmt_seq END   (rule 67)
    class_def  ->  CLASS eln ID_CAP . EOL stmt_seq END   (rule 68)

    EOL 	shift, and go to state 94
    '<' 	shift, and go to state 95



state 67

    expr_seqE  ->  expr_seq ',' . expr   (rule 37)

    INT 	shift, and go to state 1
    STRING	shift, and go to state 2
    SELF	shift, and go to state 7
    SUPER	shift, and go to state 8
    ID_CAP	shift, and go to state 10
    ID_LOW	shift, and go to state 11
    ID_FUNC	shift, and go to state 12
    ID_VAR_FIELD	shift, and go to state 13
    NIL 	shift, and go to state 14
    TRUE	shift, and go to state 15
    FALSE	shift, and go to state 16
    '-' 	shift, and go to state 19
    '!' 	shift, and go to state 20
    '[' 	shift, and go to state 21
    '(' 	shift, and go to state 22

    id  	go to state 23
    expr	go to state 96



state 68

    expr  ->  expr . '+' eln expr   (rule 8)
    expr  ->  expr . '-' eln expr   (rule 9)
    expr  ->  expr . '*' eln expr   (rule 10)
    expr  ->  expr . '/' eln expr   (rule 11)
    expr  ->  expr . '<' eln expr   (rule 12)
    expr  ->  expr . '>' eln expr   (rule 13)
    expr  ->  expr . EQUAL eln expr   (rule 14)
    expr  ->  expr . NOTEQUAL eln expr   (rule 15)
    expr  ->  expr . OR eln expr   (rule 16)
    expr  ->  expr . AND eln expr   (rule 17)
    expr  ->  expr . '=' eln expr   (rule 19)
    expr  ->  expr . '[' eln expr eln ']'   (rule 22)
    expr  ->  expr . '.' id   (rule 30)
    expr  ->  expr . '.' id '(' expr_seq ')'   (rule 31)
    if_stmt  ->  IF eln expr . eln THEN stmt_seq elsif_seq END   (rule 63)
    if_stmt  ->  IF eln expr . eln THEN stmt_seq elsif_seq ELSE stmt_seq END   (rule 64)

    EOL 	shift, and go to state 33
    EQUAL	shift, and go to state 47
    NOTEQUAL	shift, and go to state 48
    OR  	shift, and go to state 49
    AND 	shift, and go to state 50
    '=' 	shift, and go to state 51
    '<' 	shift, and go to state 52
    '>' 	shift, and go to state 53
    '-' 	shift, and go to state 54
    '+' 	shift, and go to state 55
    '*' 	shift, and go to state 56
    '/' 	shift, and go to state 57
    '.' 	shift, and go to state 58
    '[' 	shift, and go to state 59

    $default	reduce using rule 2 (eln)

    eln 	go to state 97



state 69

    expr  ->  expr . '+' eln expr   (rule 8)
    expr  ->  expr . '-' eln expr   (rule 9)
    expr  ->  expr . '*' eln expr   (rule 10)
    expr  ->  expr . '/' eln expr   (rule 11)
    expr  ->  expr . '<' eln expr   (rule 12)
    expr  ->  expr . '>' eln expr   (rule 13)
    expr  ->  expr . EQUAL eln expr   (rule 14)
    expr  ->  expr . NOTEQUAL eln expr   (rule 15)
    expr  ->  expr . OR eln expr   (rule 16)
    expr  ->  expr . AND eln expr   (rule 17)
    expr  ->  expr . '=' eln expr   (rule 19)
    expr  ->  expr . '[' eln expr eln ']'   (rule 22)
    expr  ->  expr . '.' id   (rule 30)
    expr  ->  expr . '.' id '(' expr_seq ')'   (rule 31)
    unless_stmt  ->  UNLESS eln expr . eln THEN stmt_seq END   (rule 65)
    unless_stmt  ->  UNLESS eln expr . eln THEN stmt_seq ELSE stmt_seq END   (rule 66)

    EOL 	shift, and go to state 33
    EQUAL	shift, and go to state 47
    NOTEQUAL	shift, and go to state 48
    OR  	shift, and go to state 49
    AND 	shift, and go to state 50
    '=' 	shift, and go to state 51
    '<' 	shift, and go to state 52
    '>' 	shift, and go to state 53
    '-' 	shift, and go to state 54
    '+' 	shift, and go to state 55
    '*' 	shift, and go to state 56
    '/' 	shift, and go to state 57
    '.' 	shift, and go to state 58
    '[' 	shift, and go to state 59

    $default	reduce using rule 2 (eln)

    eln 	go to state 98



state 70

    expr  ->  '[' eln expr_seq . eln ']'   (rule 23)
    expr_seqE  ->  expr_seq . ',' expr   (rule 37)

    EOL 	shift, and go to state 33
    ',' 	shift, and go to state 67

    $default	reduce using rule 2 (eln)

    eln 	go to state 99



state 71

    expr  ->  expr . '+' eln expr   (rule 8)
    expr  ->  expr . '-' eln expr   (rule 9)
    expr  ->  expr . '*' eln expr   (rule 10)
    expr  ->  expr . '/' eln expr   (rule 11)
    expr  ->  expr . '<' eln expr   (rule 12)
    expr  ->  expr . '>' eln expr   (rule 13)
    expr  ->  expr . EQUAL eln expr   (rule 14)
    expr  ->  expr . NOTEQUAL eln expr   (rule 15)
    expr  ->  expr . OR eln expr   (rule 16)
    expr  ->  expr . AND eln expr   (rule 17)
    expr  ->  expr . '=' eln expr   (rule 19)
    expr  ->  '(' eln expr . eln ')'   (rule 21)
    expr  ->  expr . '[' eln expr eln ']'   (rule 22)
    expr  ->  expr . '.' id   (rule 30)
    expr  ->  expr . '.' id '(' expr_seq ')'   (rule 31)

    EOL 	shift, and go to state 33
    EQUAL	shift, and go to state 47
    NOTEQUAL	shift, and go to state 48
    OR  	shift, and go to state 49
    AND 	shift, and go to state 50
    '=' 	shift, and go to state 51
    '<' 	shift, and go to state 52
    '>' 	shift, and go to state 53
    '-' 	shift, and go to state 54
    '+' 	shift, and go to state 55
    '*' 	shift, and go to state 56
    '/' 	shift, and go to state 57
    '.' 	shift, and go to state 58
    '[' 	shift, and go to state 59

    $default	reduce using rule 2 (eln)

    eln 	go to state 100



state 72

    expr  ->  expr EQUAL eln . expr   (rule 14)

    INT 	shift, and go to state 1
    STRING	shift, and go to state 2
    SELF	shift, and go to state 7
    SUPER	shift, and go to state 8
    ID_CAP	shift, and go to state 10
    ID_LOW	shift, and go to state 11
    ID_FUNC	shift, and go to state 12
    ID_VAR_FIELD	shift, and go to state 13
    NIL 	shift, and go to state 14
    TRUE	shift, and go to state 15
    FALSE	shift, and go to state 16
    '-' 	shift, and go to state 19
    '!' 	shift, and go to state 20
    '[' 	shift, and go to state 21
    '(' 	shift, and go to state 22

    id  	go to state 23
    expr	go to state 101



state 73

    expr  ->  expr NOTEQUAL eln . expr   (rule 15)

    INT 	shift, and go to state 1
    STRING	shift, and go to state 2
    SELF	shift, and go to state 7
    SUPER	shift, and go to state 8
    ID_CAP	shift, and go to state 10
    ID_LOW	shift, and go to state 11
    ID_FUNC	shift, and go to state 12
    ID_VAR_FIELD	shift, and go to state 13
    NIL 	shift, and go to state 14
    TRUE	shift, and go to state 15
    FALSE	shift, and go to state 16
    '-' 	shift, and go to state 19
    '!' 	shift, and go to state 20
    '[' 	shift, and go to state 21
    '(' 	shift, and go to state 22

    id  	go to state 23
    expr	go to state 102



state 74

    expr  ->  expr OR eln . expr   (rule 16)

    INT 	shift, and go to state 1
    STRING	shift, and go to state 2
    SELF	shift, and go to state 7
    SUPER	shift, and go to state 8
    ID_CAP	shift, and go to state 10
    ID_LOW	shift, and go to state 11
    ID_FUNC	shift, and go to state 12
    ID_VAR_FIELD	shift, and go to state 13
    NIL 	shift, and go to state 14
    TRUE	shift, and go to state 15
    FALSE	shift, and go to state 16
    '-' 	shift, and go to state 19
    '!' 	shift, and go to state 20
    '[' 	shift, and go to state 21
    '(' 	shift, and go to state 22

    id  	go to state 23
    expr	go to state 103



state 75

    expr  ->  expr AND eln . expr   (rule 17)

    INT 	shift, and go to state 1
    STRING	shift, and go to state 2
    SELF	shift, and go to state 7
    SUPER	shift, and go to state 8
    ID_CAP	shift, and go to state 10
    ID_LOW	shift, and go to state 11
    ID_FUNC	shift, and go to state 12
    ID_VAR_FIELD	shift, and go to state 13
    NIL 	shift, and go to state 14
    TRUE	shift, and go to state 15
    FALSE	shift, and go to state 16
    '-' 	shift, and go to state 19
    '!' 	shift, and go to state 20
    '[' 	shift, and go to state 21
    '(' 	shift, and go to state 22

    id  	go to state 23
    expr	go to state 104



state 76

    expr  ->  expr '=' eln . expr   (rule 19)

    INT 	shift, and go to state 1
    STRING	shift, and go to state 2
    SELF	shift, and go to state 7
    SUPER	shift, and go to state 8
    ID_CAP	shift, and go to state 10
    ID_LOW	shift, and go to state 11
    ID_FUNC	shift, and go to state 12
    ID_VAR_FIELD	shift, and go to state 13
    NIL 	shift, and go to state 14
    TRUE	shift, and go to state 15
    FALSE	shift, and go to state 16
    '-' 	shift, and go to state 19
    '!' 	shift, and go to state 20
    '[' 	shift, and go to state 21
    '(' 	shift, and go to state 22

    id  	go to state 23
    expr	go to state 105



state 77

    expr  ->  expr '<' eln . expr   (rule 12)

    INT 	shift, and go to state 1
    STRING	shift, and go to state 2
    SELF	shift, and go to state 7
    SUPER	shift, and go to state 8
    ID_CAP	shift, and go to state 10
    ID_LOW	shift, and go to state 11
    ID_FUNC	shift, and go to state 12
    ID_VAR_FIELD	shift, and go to state 13
    NIL 	shift, and go to state 14
    TRUE	shift, and go to state 15
    FALSE	shift, and go to state 16
    '-' 	shift, and go to state 19
    '!' 	shift, and go to state 20
    '[' 	shift, and go to state 21
    '(' 	shift, and go to state 22

    id  	go to state 23
    expr	go to state 106



state 78

    expr  ->  expr '>' eln . expr   (rule 13)

    INT 	shift, and go to state 1
    STRING	shift, and go to state 2
    SELF	shift, and go to state 7
    SUPER	shift, and go to state 8
    ID_CAP	shift, and go to state 10
    ID_LOW	shift, and go to state 11
    ID_FUNC	shift, and go to state 12
    ID_VAR_FIELD	shift, and go to state 13
    NIL 	shift, and go to state 14
    TRUE	shift, and go to state 15
    FALSE	shift, and go to state 16
    '-' 	shift, and go to state 19
    '!' 	shift, and go to state 20
    '[' 	shift, and go to state 21
    '(' 	shift, and go to state 22

    id  	go to state 23
    expr	go to state 107



state 79

    expr  ->  expr '-' eln . expr   (rule 9)

    INT 	shift, and go to state 1
    STRING	shift, and go to state 2
    SELF	shift, and go to state 7
    SUPER	shift, and go to state 8
    ID_CAP	shift, and go to state 10
    ID_LOW	shift, and go to state 11
    ID_FUNC	shift, and go to state 12
    ID_VAR_FIELD	shift, and go to state 13
    NIL 	shift, and go to state 14
    TRUE	shift, and go to state 15
    FALSE	shift, and go to state 16
    '-' 	shift, and go to state 19
    '!' 	shift, and go to state 20
    '[' 	shift, and go to state 21
    '(' 	shift, and go to state 22

    id  	go to state 23
    expr	go to state 108



state 80

    expr  ->  expr '+' eln . expr   (rule 8)

    INT 	shift, and go to state 1
    STRING	shift, and go to state 2
    SELF	shift, and go to state 7
    SUPER	shift, and go to state 8
    ID_CAP	shift, and go to state 10
    ID_LOW	shift, and go to state 11
    ID_FUNC	shift, and go to state 12
    ID_VAR_FIELD	shift, and go to state 13
    NIL 	shift, and go to state 14
    TRUE	shift, and go to state 15
    FALSE	shift, and go to state 16
    '-' 	shift, and go to state 19
    '!' 	shift, and go to state 20
    '[' 	shift, and go to state 21
    '(' 	shift, and go to state 22

    id  	go to state 23
    expr	go to state 109



state 81

    expr  ->  expr '*' eln . expr   (rule 10)

    INT 	shift, and go to state 1
    STRING	shift, and go to state 2
    SELF	shift, and go to state 7
    SUPER	shift, and go to state 8
    ID_CAP	shift, and go to state 10
    ID_LOW	shift, and go to state 11
    ID_FUNC	shift, and go to state 12
    ID_VAR_FIELD	shift, and go to state 13
    NIL 	shift, and go to state 14
    TRUE	shift, and go to state 15
    FALSE	shift, and go to state 16
    '-' 	shift, and go to state 19
    '!' 	shift, and go to state 20
    '[' 	shift, and go to state 21
    '(' 	shift, and go to state 22

    id  	go to state 23
    expr	go to state 110



state 82

    expr  ->  expr '/' eln . expr   (rule 11)

    INT 	shift, and go to state 1
    STRING	shift, and go to state 2
    SELF	shift, and go to state 7
    SUPER	shift, and go to state 8
    ID_CAP	shift, and go to state 10
    ID_LOW	shift, and go to state 11
    ID_FUNC	shift, and go to state 12
    ID_VAR_FIELD	shift, and go to state 13
    NIL 	shift, and go to state 14
    TRUE	shift, and go to state 15
    FALSE	shift, and go to state 16
    '-' 	shift, and go to state 19
    '!' 	shift, and go to state 20
    '[' 	shift, and go to state 21
    '(' 	shift, and go to state 22

    id  	go to state 23
    expr	go to state 111



state 83

    expr  ->  expr '.' id .   (rule 30)
    expr  ->  expr '.' id . '(' expr_seq ')'   (rule 31)

    '(' 	shift, and go to state 112

    $default	reduce using rule 30 (expr)



state 84

    expr  ->  expr '[' eln . expr eln ']'   (rule 22)

    INT 	shift, and go to state 1
    STRING	shift, and go to state 2
    SELF	shift, and go to state 7
    SUPER	shift, and go to state 8
    ID_CAP	shift, and go to state 10
    ID_LOW	shift, and go to state 11
    ID_FUNC	shift, and go to state 12
    ID_VAR_FIELD	shift, and go to state 13
    NIL 	shift, and go to state 14
    TRUE	shift, and go to state 15
    FALSE	shift, and go to state 16
    '-' 	shift, and go to state 19
    '!' 	shift, and go to state 20
    '[' 	shift, and go to state 21
    '(' 	shift, and go to state 22

    id  	go to state 23
    expr	go to state 113



state 85

    stmt_seq  ->  stmt_seq EOL stmt .   (rule 48)

    $default	reduce using rule 48 (stmt_seq)



state 86

    method_def_param_seqE  ->  ID_LOW .   (rule 53)

    $default	reduce using rule 53 (method_def_param_seqE)



state 87

    method_def  ->  DEF eln id '(' . method_def_param_seq eln ')' stmt_seq END   (rule 49)

    ID_LOW	shift, and go to state 86

    $default	reduce using rule 51 (method_def_param_seq)

    method_def_param_seq	go to state 114
    method_def_param_seqE	go to state 89



state 88

    method_def  ->  DEF eln id method_def_param_seq . EOL stmt_seq END   (rule 50)
    method_def_param_seqE  ->  method_def_param_seq . ',' eln ID_LOW   (rule 54)

    EOL 	shift, and go to state 115
    ',' 	shift, and go to state 116



state 89

    method_def_param_seq  ->  method_def_param_seqE .   (rule 52)

    $default	reduce using rule 52 (method_def_param_seq)



state 90

    expr  ->  '(' eln . expr eln ')'   (rule 21)
    while_stmt  ->  WHILE eln '(' eln . expr eln ')' EOL stmt_seq END   (rule 56)

    INT 	shift, and go to state 1
    STRING	shift, and go to state 2
    SELF	shift, and go to state 7
    SUPER	shift, and go to state 8
    ID_CAP	shift, and go to state 10
    ID_LOW	shift, and go to state 11
    ID_FUNC	shift, and go to state 12
    ID_VAR_FIELD	shift, and go to state 13
    NIL 	shift, and go to state 14
    TRUE	shift, and go to state 15
    FALSE	shift, and go to state 16
    '-' 	shift, and go to state 19
    '!' 	shift, and go to state 20
    '[' 	shift, and go to state 21
    '(' 	shift, and go to state 22

    id  	go to state 23
    expr	go to state 117



state 91

    while_stmt  ->  WHILE eln expr DO . stmt_seq END   (rule 55)

    INT 	shift, and go to state 1
    STRING	shift, and go to state 2
    DEF 	shift, and go to state 3
    WHILE	shift, and go to state 4
    UNTIL	shift, and go to state 5
    CLASS	shift, and go to state 6
    SELF	shift, and go to state 7
    SUPER	shift, and go to state 8
    RETURN	shift, and go to state 9
    ID_CAP	shift, and go to state 10
    ID_LOW	shift, and go to state 11
    ID_FUNC	shift, and go to state 12
    ID_VAR_FIELD	shift, and go to state 13
    NIL 	shift, and go to state 14
    TRUE	shift, and go to state 15
    FALSE	shift, and go to state 16
    IF  	shift, and go to state 17
    UNLESS	shift, and go to state 18
    '-' 	shift, and go to state 19
    '!' 	shift, and go to state 20
    '[' 	shift, and go to state 21
    '(' 	shift, and go to state 22

    $default	reduce using rule 38 (stmt)

    id  	go to state 23
    expr	go to state 24
    stmt	go to state 25
    stmt_seq	go to state 118
    method_def	go to state 27
    while_stmt	go to state 28
    until_stmt	go to state 29
    if_stmt	go to state 30
    unless_stmt	go to state 31
    class_def	go to state 32



state 92

    expr  ->  '(' eln . expr eln ')'   (rule 21)
    until_stmt  ->  UNTIL eln '(' eln . expr eln ')' EOL stmt_seq END   (rule 58)

    INT 	shift, and go to state 1
    STRING	shift, and go to state 2
    SELF	shift, and go to state 7
    SUPER	shift, and go to state 8
    ID_CAP	shift, and go to state 10
    ID_LOW	shift, and go to state 11
    ID_FUNC	shift, and go to state 12
    ID_VAR_FIELD	shift, and go to state 13
    NIL 	shift, and go to state 14
    TRUE	shift, and go to state 15
    FALSE	shift, and go to state 16
    '-' 	shift, and go to state 19
    '!' 	shift, and go to state 20
    '[' 	shift, and go to state 21
    '(' 	shift, and go to state 22

    id  	go to state 23
    expr	go to state 119



state 93

    until_stmt  ->  UNTIL eln expr DO . stmt_seq END   (rule 57)

    INT 	shift, and go to state 1
    STRING	shift, and go to state 2
    DEF 	shift, and go to state 3
    WHILE	shift, and go to state 4
    UNTIL	shift, and go to state 5
    CLASS	shift, and go to state 6
    SELF	shift, and go to state 7
    SUPER	shift, and go to state 8
    RETURN	shift, and go to state 9
    ID_CAP	shift, and go to state 10
    ID_LOW	shift, and go to state 11
    ID_FUNC	shift, and go to state 12
    ID_VAR_FIELD	shift, and go to state 13
    NIL 	shift, and go to state 14
    TRUE	shift, and go to state 15
    FALSE	shift, and go to state 16
    IF  	shift, and go to state 17
    UNLESS	shift, and go to state 18
    '-' 	shift, and go to state 19
    '!' 	shift, and go to state 20
    '[' 	shift, and go to state 21
    '(' 	shift, and go to state 22

    $default	reduce using rule 38 (stmt)

    id  	go to state 23
    expr	go to state 24
    stmt	go to state 25
    stmt_seq	go to state 120
    method_def	go to state 27
    while_stmt	go to state 28
    until_stmt	go to state 29
    if_stmt	go to state 30
    unless_stmt	go to state 31
    class_def	go to state 32



state 94

    class_def  ->  CLASS eln ID_CAP EOL . stmt_seq END   (rule 68)

    INT 	shift, and go to state 1
    STRING	shift, and go to state 2
    DEF 	shift, and go to state 3
    WHILE	shift, and go to state 4
    UNTIL	shift, and go to state 5
    CLASS	shift, and go to state 6
    SELF	shift, and go to state 7
    SUPER	shift, and go to state 8
    RETURN	shift, and go to state 9
    ID_CAP	shift, and go to state 10
    ID_LOW	shift, and go to state 11
    ID_FUNC	shift, and go to state 12
    ID_VAR_FIELD	shift, and go to state 13
    NIL 	shift, and go to state 14
    TRUE	shift, and go to state 15
    FALSE	shift, and go to state 16
    IF  	shift, and go to state 17
    UNLESS	shift, and go to state 18
    '-' 	shift, and go to state 19
    '!' 	shift, and go to state 20
    '[' 	shift, and go to state 21
    '(' 	shift, and go to state 22

    $default	reduce using rule 38 (stmt)

    id  	go to state 23
    expr	go to state 24
    stmt	go to state 25
    stmt_seq	go to state 121
    method_def	go to state 27
    while_stmt	go to state 28
    until_stmt	go to state 29
    if_stmt	go to state 30
    unless_stmt	go to state 31
    class_def	go to state 32



state 95

    class_def  ->  CLASS eln ID_CAP '<' . eln ID_CAP EOL stmt_seq END   (rule 67)

    EOL 	shift, and go to state 33

    $default	reduce using rule 2 (eln)

    eln 	go to state 122



state 96

    expr  ->  expr . '+' eln expr   (rule 8)
    expr  ->  expr . '-' eln expr   (rule 9)
    expr  ->  expr . '*' eln expr   (rule 10)
    expr  ->  expr . '/' eln expr   (rule 11)
    expr  ->  expr . '<' eln expr   (rule 12)
    expr  ->  expr . '>' eln expr   (rule 13)
    expr  ->  expr . EQUAL eln expr   (rule 14)
    expr  ->  expr . NOTEQUAL eln expr   (rule 15)
    expr  ->  expr . OR eln expr   (rule 16)
    expr  ->  expr . AND eln expr   (rule 17)
    expr  ->  expr . '=' eln expr   (rule 19)
    expr  ->  expr . '[' eln expr eln ']'   (rule 22)
    expr  ->  expr . '.' id   (rule 30)
    expr  ->  expr . '.' id '(' expr_seq ')'   (rule 31)
    expr_seqE  ->  expr_seq ',' expr .   (rule 37)

    EQUAL	shift, and go to state 47
    NOTEQUAL	shift, and go to state 48
    OR  	shift, and go to state 49
    AND 	shift, and go to state 50
    '=' 	shift, and go to state 51
    '<' 	shift, and go to state 52
    '>' 	shift, and go to state 53
    '-' 	shift, and go to state 54
    '+' 	shift, and go to state 55
    '*' 	shift, and go to state 56
    '/' 	shift, and go to state 57
    '.' 	shift, and go to state 58
    '[' 	shift, and go to state 59

    $default	reduce using rule 37 (expr_seqE)



state 97

    if_stmt  ->  IF eln expr eln . THEN stmt_seq elsif_seq END   (rule 63)
    if_stmt  ->  IF eln expr eln . THEN stmt_seq elsif_seq ELSE stmt_seq END   (rule 64)

    THEN	shift, and go to state 123



state 98

    unless_stmt  ->  UNLESS eln expr eln . THEN stmt_seq END   (rule 65)
    unless_stmt  ->  UNLESS eln expr eln . THEN stmt_seq ELSE stmt_seq END   (rule 66)

    THEN	shift, and go to state 124



state 99

    expr  ->  '[' eln expr_seq eln . ']'   (rule 23)

    ']' 	shift, and go to state 125



state 100

    expr  ->  '(' eln expr eln . ')'   (rule 21)

    ')' 	shift, and go to state 126



state 101

    expr  ->  expr . '+' eln expr   (rule 8)
    expr  ->  expr . '-' eln expr   (rule 9)
    expr  ->  expr . '*' eln expr   (rule 10)
    expr  ->  expr . '/' eln expr   (rule 11)
    expr  ->  expr . '<' eln expr   (rule 12)
    expr  ->  expr . '>' eln expr   (rule 13)
    expr  ->  expr . EQUAL eln expr   (rule 14)
    expr  ->  expr EQUAL eln expr .   (rule 14)
    expr  ->  expr . NOTEQUAL eln expr   (rule 15)
    expr  ->  expr . OR eln expr   (rule 16)
    expr  ->  expr . AND eln expr   (rule 17)
    expr  ->  expr . '=' eln expr   (rule 19)
    expr  ->  expr . '[' eln expr eln ']'   (rule 22)
    expr  ->  expr . '.' id   (rule 30)
    expr  ->  expr . '.' id '(' expr_seq ')'   (rule 31)

    '=' 	shift, and go to state 51
    '<' 	shift, and go to state 52
    '>' 	shift, and go to state 53
    '-' 	shift, and go to state 54
    '+' 	shift, and go to state 55
    '*' 	shift, and go to state 56
    '/' 	shift, and go to state 57
    '.' 	shift, and go to state 58
    '[' 	shift, and go to state 59

    $default	reduce using rule 14 (expr)



state 102

    expr  ->  expr . '+' eln expr   (rule 8)
    expr  ->  expr . '-' eln expr   (rule 9)
    expr  ->  expr . '*' eln expr   (rule 10)
    expr  ->  expr . '/' eln expr   (rule 11)
    expr  ->  expr . '<' eln expr   (rule 12)
    expr  ->  expr . '>' eln expr   (rule 13)
    expr  ->  expr . EQUAL eln expr   (rule 14)
    expr  ->  expr . NOTEQUAL eln expr   (rule 15)
    expr  ->  expr NOTEQUAL eln expr .   (rule 15)
    expr  ->  expr . OR eln expr   (rule 16)
    expr  ->  expr . AND eln expr   (rule 17)
    expr  ->  expr . '=' eln expr   (rule 19)
    expr  ->  expr . '[' eln expr eln ']'   (rule 22)
    expr  ->  expr . '.' id   (rule 30)
    expr  ->  expr . '.' id '(' expr_seq ')'   (rule 31)

    '=' 	shift, and go to state 51
    '<' 	shift, and go to state 52
    '>' 	shift, and go to state 53
    '-' 	shift, and go to state 54
    '+' 	shift, and go to state 55
    '*' 	shift, and go to state 56
    '/' 	shift, and go to state 57
    '.' 	shift, and go to state 58
    '[' 	shift, and go to state 59

    $default	reduce using rule 15 (expr)



state 103

    expr  ->  expr . '+' eln expr   (rule 8)
    expr  ->  expr . '-' eln expr   (rule 9)
    expr  ->  expr . '*' eln expr   (rule 10)
    expr  ->  expr . '/' eln expr   (rule 11)
    expr  ->  expr . '<' eln expr   (rule 12)
    expr  ->  expr . '>' eln expr   (rule 13)
    expr  ->  expr . EQUAL eln expr   (rule 14)
    expr  ->  expr . NOTEQUAL eln expr   (rule 15)
    expr  ->  expr . OR eln expr   (rule 16)
    expr  ->  expr OR eln expr .   (rule 16)
    expr  ->  expr . AND eln expr   (rule 17)
    expr  ->  expr . '=' eln expr   (rule 19)
    expr  ->  expr . '[' eln expr eln ']'   (rule 22)
    expr  ->  expr . '.' id   (rule 30)
    expr  ->  expr . '.' id '(' expr_seq ')'   (rule 31)

    EQUAL	shift, and go to state 47
    NOTEQUAL	shift, and go to state 48
    AND 	shift, and go to state 50
    '=' 	shift, and go to state 51
    '<' 	shift, and go to state 52
    '>' 	shift, and go to state 53
    '-' 	shift, and go to state 54
    '+' 	shift, and go to state 55
    '*' 	shift, and go to state 56
    '/' 	shift, and go to state 57
    '.' 	shift, and go to state 58
    '[' 	shift, and go to state 59

    $default	reduce using rule 16 (expr)



state 104

    expr  ->  expr . '+' eln expr   (rule 8)
    expr  ->  expr . '-' eln expr   (rule 9)
    expr  ->  expr . '*' eln expr   (rule 10)
    expr  ->  expr . '/' eln expr   (rule 11)
    expr  ->  expr . '<' eln expr   (rule 12)
    expr  ->  expr . '>' eln expr   (rule 13)
    expr  ->  expr . EQUAL eln expr   (rule 14)
    expr  ->  expr . NOTEQUAL eln expr   (rule 15)
    expr  ->  expr . OR eln expr   (rule 16)
    expr  ->  expr . AND eln expr   (rule 17)
    expr  ->  expr AND eln expr .   (rule 17)
    expr  ->  expr . '=' eln expr   (rule 19)
    expr  ->  expr . '[' eln expr eln ']'   (rule 22)
    expr  ->  expr . '.' id   (rule 30)
    expr  ->  expr . '.' id '(' expr_seq ')'   (rule 31)

    EQUAL	shift, and go to state 47
    NOTEQUAL	shift, and go to state 48
    '=' 	shift, and go to state 51
    '<' 	shift, and go to state 52
    '>' 	shift, and go to state 53
    '-' 	shift, and go to state 54
    '+' 	shift, and go to state 55
    '*' 	shift, and go to state 56
    '/' 	shift, and go to state 57
    '.' 	shift, and go to state 58
    '[' 	shift, and go to state 59

    $default	reduce using rule 17 (expr)



state 105

    expr  ->  expr . '+' eln expr   (rule 8)
    expr  ->  expr . '-' eln expr   (rule 9)
    expr  ->  expr . '*' eln expr   (rule 10)
    expr  ->  expr . '/' eln expr   (rule 11)
    expr  ->  expr . '<' eln expr   (rule 12)
    expr  ->  expr . '>' eln expr   (rule 13)
    expr  ->  expr . EQUAL eln expr   (rule 14)
    expr  ->  expr . NOTEQUAL eln expr   (rule 15)
    expr  ->  expr . OR eln expr   (rule 16)
    expr  ->  expr . AND eln expr   (rule 17)
    expr  ->  expr . '=' eln expr   (rule 19)
    expr  ->  expr '=' eln expr .   (rule 19)
    expr  ->  expr . '[' eln expr eln ']'   (rule 22)
    expr  ->  expr . '.' id   (rule 30)
    expr  ->  expr . '.' id '(' expr_seq ')'   (rule 31)

    '=' 	shift, and go to state 51
    '<' 	shift, and go to state 52
    '>' 	shift, and go to state 53
    '-' 	shift, and go to state 54
    '+' 	shift, and go to state 55
    '*' 	shift, and go to state 56
    '/' 	shift, and go to state 57
    '.' 	shift, and go to state 58
    '[' 	shift, and go to state 59

    $default	reduce using rule 19 (expr)



state 106

    expr  ->  expr . '+' eln expr   (rule 8)
    expr  ->  expr . '-' eln expr   (rule 9)
    expr  ->  expr . '*' eln expr   (rule 10)
    expr  ->  expr . '/' eln expr   (rule 11)
    expr  ->  expr . '<' eln expr   (rule 12)
    expr  ->  expr '<' eln expr .   (rule 12)
    expr  ->  expr . '>' eln expr   (rule 13)
    expr  ->  expr . EQUAL eln expr   (rule 14)
    expr  ->  expr . NOTEQUAL eln expr   (rule 15)
    expr  ->  expr . OR eln expr   (rule 16)
    expr  ->  expr . AND eln expr   (rule 17)
    expr  ->  expr . '=' eln expr   (rule 19)
    expr  ->  expr . '[' eln expr eln ']'   (rule 22)
    expr  ->  expr . '.' id   (rule 30)
    expr  ->  expr . '.' id '(' expr_seq ')'   (rule 31)

    '-' 	shift, and go to state 54
    '+' 	shift, and go to state 55
    '*' 	shift, and go to state 56
    '/' 	shift, and go to state 57
    '.' 	shift, and go to state 58
    '[' 	shift, and go to state 59

    $default	reduce using rule 12 (expr)



state 107

    expr  ->  expr . '+' eln expr   (rule 8)
    expr  ->  expr . '-' eln expr   (rule 9)
    expr  ->  expr . '*' eln expr   (rule 10)
    expr  ->  expr . '/' eln expr   (rule 11)
    expr  ->  expr . '<' eln expr   (rule 12)
    expr  ->  expr . '>' eln expr   (rule 13)
    expr  ->  expr '>' eln expr .   (rule 13)
    expr  ->  expr . EQUAL eln expr   (rule 14)
    expr  ->  expr . NOTEQUAL eln expr   (rule 15)
    expr  ->  expr . OR eln expr   (rule 16)
    expr  ->  expr . AND eln expr   (rule 17)
    expr  ->  expr . '=' eln expr   (rule 19)
    expr  ->  expr . '[' eln expr eln ']'   (rule 22)
    expr  ->  expr . '.' id   (rule 30)
    expr  ->  expr . '.' id '(' expr_seq ')'   (rule 31)

    '-' 	shift, and go to state 54
    '+' 	shift, and go to state 55
    '*' 	shift, and go to state 56
    '/' 	shift, and go to state 57
    '.' 	shift, and go to state 58
    '[' 	shift, and go to state 59

    $default	reduce using rule 13 (expr)



state 108

    expr  ->  expr . '+' eln expr   (rule 8)
    expr  ->  expr . '-' eln expr   (rule 9)
    expr  ->  expr '-' eln expr .   (rule 9)
    expr  ->  expr . '*' eln expr   (rule 10)
    expr  ->  expr . '/' eln expr   (rule 11)
    expr  ->  expr . '<' eln expr   (rule 12)
    expr  ->  expr . '>' eln expr   (rule 13)
    expr  ->  expr . EQUAL eln expr   (rule 14)
    expr  ->  expr . NOTEQUAL eln expr   (rule 15)
    expr  ->  expr . OR eln expr   (rule 16)
    expr  ->  expr . AND eln expr   (rule 17)
    expr  ->  expr . '=' eln expr   (rule 19)
    expr  ->  expr . '[' eln expr eln ']'   (rule 22)
    expr  ->  expr . '.' id   (rule 30)
    expr  ->  expr . '.' id '(' expr_seq ')'   (rule 31)

    '*' 	shift, and go to state 56
    '/' 	shift, and go to state 57
    '.' 	shift, and go to state 58
    '[' 	shift, and go to state 59

    $default	reduce using rule 9 (expr)



state 109

    expr  ->  expr . '+' eln expr   (rule 8)
    expr  ->  expr '+' eln expr .   (rule 8)
    expr  ->  expr . '-' eln expr   (rule 9)
    expr  ->  expr . '*' eln expr   (rule 10)
    expr  ->  expr . '/' eln expr   (rule 11)
    expr  ->  expr . '<' eln expr   (rule 12)
    expr  ->  expr . '>' eln expr   (rule 13)
    expr  ->  expr . EQUAL eln expr   (rule 14)
    expr  ->  expr . NOTEQUAL eln expr   (rule 15)
    expr  ->  expr . OR eln expr   (rule 16)
    expr  ->  expr . AND eln expr   (rule 17)
    expr  ->  expr . '=' eln expr   (rule 19)
    expr  ->  expr . '[' eln expr eln ']'   (rule 22)
    expr  ->  expr . '.' id   (rule 30)
    expr  ->  expr . '.' id '(' expr_seq ')'   (rule 31)

    '*' 	shift, and go to state 56
    '/' 	shift, and go to state 57
    '.' 	shift, and go to state 58
    '[' 	shift, and go to state 59

    $default	reduce using rule 8 (expr)



state 110

    expr  ->  expr . '+' eln expr   (rule 8)
    expr  ->  expr . '-' eln expr   (rule 9)
    expr  ->  expr . '*' eln expr   (rule 10)
    expr  ->  expr '*' eln expr .   (rule 10)
    expr  ->  expr . '/' eln expr   (rule 11)
    expr  ->  expr . '<' eln expr   (rule 12)
    expr  ->  expr . '>' eln expr   (rule 13)
    expr  ->  expr . EQUAL eln expr   (rule 14)
    expr  ->  expr . NOTEQUAL eln expr   (rule 15)
    expr  ->  expr . OR eln expr   (rule 16)
    expr  ->  expr . AND eln expr   (rule 17)
    expr  ->  expr . '=' eln expr   (rule 19)
    expr  ->  expr . '[' eln expr eln ']'   (rule 22)
    expr  ->  expr . '.' id   (rule 30)
    expr  ->  expr . '.' id '(' expr_seq ')'   (rule 31)

    '.' 	shift, and go to state 58
    '[' 	shift, and go to state 59

    $default	reduce using rule 10 (expr)



state 111

    expr  ->  expr . '+' eln expr   (rule 8)
    expr  ->  expr . '-' eln expr   (rule 9)
    expr  ->  expr . '*' eln expr   (rule 10)
    expr  ->  expr . '/' eln expr   (rule 11)
    expr  ->  expr '/' eln expr .   (rule 11)
    expr  ->  expr . '<' eln expr   (rule 12)
    expr  ->  expr . '>' eln expr   (rule 13)
    expr  ->  expr . EQUAL eln expr   (rule 14)
    expr  ->  expr . NOTEQUAL eln expr   (rule 15)
    expr  ->  expr . OR eln expr   (rule 16)
    expr  ->  expr . AND eln expr   (rule 17)
    expr  ->  expr . '=' eln expr   (rule 19)
    expr  ->  expr . '[' eln expr eln ']'   (rule 22)
    expr  ->  expr . '.' id   (rule 30)
    expr  ->  expr . '.' id '(' expr_seq ')'   (rule 31)

    '.' 	shift, and go to state 58
    '[' 	shift, and go to state 59

    $default	reduce using rule 11 (expr)



state 112

    expr  ->  expr '.' id '(' . expr_seq ')'   (rule 31)

    INT 	shift, and go to state 1
    STRING	shift, and go to state 2
    SELF	shift, and go to state 7
    SUPER	shift, and go to state 8
    ID_CAP	shift, and go to state 10
    ID_LOW	shift, and go to state 11
    ID_FUNC	shift, and go to state 12
    ID_VAR_FIELD	shift, and go to state 13
    NIL 	shift, and go to state 14
    TRUE	shift, and go to state 15
    FALSE	shift, and go to state 16
    '-' 	shift, and go to state 19
    '!' 	shift, and go to state 20
    '[' 	shift, and go to state 21
    '(' 	shift, and go to state 22

    $default	reduce using rule 34 (expr_seq)

    id  	go to state 23
    expr	go to state 38
    expr_seq	go to state 127
    expr_seqE	go to state 40



state 113

    expr  ->  expr . '+' eln expr   (rule 8)
    expr  ->  expr . '-' eln expr   (rule 9)
    expr  ->  expr . '*' eln expr   (rule 10)
    expr  ->  expr . '/' eln expr   (rule 11)
    expr  ->  expr . '<' eln expr   (rule 12)
    expr  ->  expr . '>' eln expr   (rule 13)
    expr  ->  expr . EQUAL eln expr   (rule 14)
    expr  ->  expr . NOTEQUAL eln expr   (rule 15)
    expr  ->  expr . OR eln expr   (rule 16)
    expr  ->  expr . AND eln expr   (rule 17)
    expr  ->  expr . '=' eln expr   (rule 19)
    expr  ->  expr . '[' eln expr eln ']'   (rule 22)
    expr  ->  expr '[' eln expr . eln ']'   (rule 22)
    expr  ->  expr . '.' id   (rule 30)
    expr  ->  expr . '.' id '(' expr_seq ')'   (rule 31)

    EOL 	shift, and go to state 33
    EQUAL	shift, and go to state 47
    NOTEQUAL	shift, and go to state 48
    OR  	shift, and go to state 49
    AND 	shift, and go to state 50
    '=' 	shift, and go to state 51
    '<' 	shift, and go to state 52
    '>' 	shift, and go to state 53
    '-' 	shift, and go to state 54
    '+' 	shift, and go to state 55
    '*' 	shift, and go to state 56
    '/' 	shift, and go to state 57
    '.' 	shift, and go to state 58
    '[' 	shift, and go to state 59

    $default	reduce using rule 2 (eln)

    eln 	go to state 128



state 114

    method_def  ->  DEF eln id '(' method_def_param_seq . eln ')' stmt_seq END   (rule 49)
    method_def_param_seqE  ->  method_def_param_seq . ',' eln ID_LOW   (rule 54)

    EOL 	shift, and go to state 33
    ',' 	shift, and go to state 116

    $default	reduce using rule 2 (eln)

    eln 	go to state 129



state 115

    method_def  ->  DEF eln id method_def_param_seq EOL . stmt_seq END   (rule 50)

    INT 	shift, and go to state 1
    STRING	shift, and go to state 2
    DEF 	shift, and go to state 3
    WHILE	shift, and go to state 4
    UNTIL	shift, and go to state 5
    CLASS	shift, and go to state 6
    SELF	shift, and go to state 7
    SUPER	shift, and go to state 8
    RETURN	shift, and go to state 9
    ID_CAP	shift, and go to state 10
    ID_LOW	shift, and go to state 11
    ID_FUNC	shift, and go to state 12
    ID_VAR_FIELD	shift, and go to state 13
    NIL 	shift, and go to state 14
    TRUE	shift, and go to state 15
    FALSE	shift, and go to state 16
    IF  	shift, and go to state 17
    UNLESS	shift, and go to state 18
    '-' 	shift, and go to state 19
    '!' 	shift, and go to state 20
    '[' 	shift, and go to state 21
    '(' 	shift, and go to state 22

    $default	reduce using rule 38 (stmt)

    id  	go to state 23
    expr	go to state 24
    stmt	go to state 25
    stmt_seq	go to state 130
    method_def	go to state 27
    while_stmt	go to state 28
    until_stmt	go to state 29
    if_stmt	go to state 30
    unless_stmt	go to state 31
    class_def	go to state 32



state 116

    method_def_param_seqE  ->  method_def_param_seq ',' . eln ID_LOW   (rule 54)

    EOL 	shift, and go to state 33

    $default	reduce using rule 2 (eln)

    eln 	go to state 131



state 117

    expr  ->  expr . '+' eln expr   (rule 8)
    expr  ->  expr . '-' eln expr   (rule 9)
    expr  ->  expr . '*' eln expr   (rule 10)
    expr  ->  expr . '/' eln expr   (rule 11)
    expr  ->  expr . '<' eln expr   (rule 12)
    expr  ->  expr . '>' eln expr   (rule 13)
    expr  ->  expr . EQUAL eln expr   (rule 14)
    expr  ->  expr . NOTEQUAL eln expr   (rule 15)
    expr  ->  expr . OR eln expr   (rule 16)
    expr  ->  expr . AND eln expr   (rule 17)
    expr  ->  expr . '=' eln expr   (rule 19)
    expr  ->  '(' eln expr . eln ')'   (rule 21)
    expr  ->  expr . '[' eln expr eln ']'   (rule 22)
    expr  ->  expr . '.' id   (rule 30)
    expr  ->  expr . '.' id '(' expr_seq ')'   (rule 31)
    while_stmt  ->  WHILE eln '(' eln expr . eln ')' EOL stmt_seq END   (rule 56)

    EOL 	shift, and go to state 33
    EQUAL	shift, and go to state 47
    NOTEQUAL	shift, and go to state 48
    OR  	shift, and go to state 49
    AND 	shift, and go to state 50
    '=' 	shift, and go to state 51
    '<' 	shift, and go to state 52
    '>' 	shift, and go to state 53
    '-' 	shift, and go to state 54
    '+' 	shift, and go to state 55
    '*' 	shift, and go to state 56
    '/' 	shift, and go to state 57
    '.' 	shift, and go to state 58
    '[' 	shift, and go to state 59

    $default	reduce using rule 2 (eln)

    eln 	go to state 132



state 118

    stmt_seq  ->  stmt_seq . EOL stmt   (rule 48)
    while_stmt  ->  WHILE eln expr DO stmt_seq . END   (rule 55)

    EOL 	shift, and go to state 60
    END 	shift, and go to state 133



state 119

    expr  ->  expr . '+' eln expr   (rule 8)
    expr  ->  expr . '-' eln expr   (rule 9)
    expr  ->  expr . '*' eln expr   (rule 10)
    expr  ->  expr . '/' eln expr   (rule 11)
    expr  ->  expr . '<' eln expr   (rule 12)
    expr  ->  expr . '>' eln expr   (rule 13)
    expr  ->  expr . EQUAL eln expr   (rule 14)
    expr  ->  expr . NOTEQUAL eln expr   (rule 15)
    expr  ->  expr . OR eln expr   (rule 16)
    expr  ->  expr . AND eln expr   (rule 17)
    expr  ->  expr . '=' eln expr   (rule 19)
    expr  ->  '(' eln expr . eln ')'   (rule 21)
    expr  ->  expr . '[' eln expr eln ']'   (rule 22)
    expr  ->  expr . '.' id   (rule 30)
    expr  ->  expr . '.' id '(' expr_seq ')'   (rule 31)
    until_stmt  ->  UNTIL eln '(' eln expr . eln ')' EOL stmt_seq END   (rule 58)

    EOL 	shift, and go to state 33
    EQUAL	shift, and go to state 47
    NOTEQUAL	shift, and go to state 48
    OR  	shift, and go to state 49
    AND 	shift, and go to state 50
    '=' 	shift, and go to state 51
    '<' 	shift, and go to state 52
    '>' 	shift, and go to state 53
    '-' 	shift, and go to state 54
    '+' 	shift, and go to state 55
    '*' 	shift, and go to state 56
    '/' 	shift, and go to state 57
    '.' 	shift, and go to state 58
    '[' 	shift, and go to state 59

    $default	reduce using rule 2 (eln)

    eln 	go to state 134



state 120

    stmt_seq  ->  stmt_seq . EOL stmt   (rule 48)
    until_stmt  ->  UNTIL eln expr DO stmt_seq . END   (rule 57)

    EOL 	shift, and go to state 60
    END 	shift, and go to state 135



state 121

    stmt_seq  ->  stmt_seq . EOL stmt   (rule 48)
    class_def  ->  CLASS eln ID_CAP EOL stmt_seq . END   (rule 68)

    EOL 	shift, and go to state 60
    END 	shift, and go to state 136



state 122

    class_def  ->  CLASS eln ID_CAP '<' eln . ID_CAP EOL stmt_seq END   (rule 67)

    ID_CAP	shift, and go to state 137



state 123

    if_stmt  ->  IF eln expr eln THEN . stmt_seq elsif_seq END   (rule 63)
    if_stmt  ->  IF eln expr eln THEN . stmt_seq elsif_seq ELSE stmt_seq END   (rule 64)

    INT 	shift, and go to state 1
    STRING	shift, and go to state 2
    DEF 	shift, and go to state 3
    WHILE	shift, and go to state 4
    UNTIL	shift, and go to state 5
    CLASS	shift, and go to state 6
    SELF	shift, and go to state 7
    SUPER	shift, and go to state 8
    RETURN	shift, and go to state 9
    ID_CAP	shift, and go to state 10
    ID_LOW	shift, and go to state 11
    ID_FUNC	shift, and go to state 12
    ID_VAR_FIELD	shift, and go to state 13
    NIL 	shift, and go to state 14
    TRUE	shift, and go to state 15
    FALSE	shift, and go to state 16
    IF  	shift, and go to state 17
    UNLESS	shift, and go to state 18
    '-' 	shift, and go to state 19
    '!' 	shift, and go to state 20
    '[' 	shift, and go to state 21
    '(' 	shift, and go to state 22

    $default	reduce using rule 38 (stmt)

    id  	go to state 23
    expr	go to state 24
    stmt	go to state 25
    stmt_seq	go to state 138
    method_def	go to state 27
    while_stmt	go to state 28
    until_stmt	go to state 29
    if_stmt	go to state 30
    unless_stmt	go to state 31
    class_def	go to state 32



state 124

    unless_stmt  ->  UNLESS eln expr eln THEN . stmt_seq END   (rule 65)
    unless_stmt  ->  UNLESS eln expr eln THEN . stmt_seq ELSE stmt_seq END   (rule 66)

    INT 	shift, and go to state 1
    STRING	shift, and go to state 2
    DEF 	shift, and go to state 3
    WHILE	shift, and go to state 4
    UNTIL	shift, and go to state 5
    CLASS	shift, and go to state 6
    SELF	shift, and go to state 7
    SUPER	shift, and go to state 8
    RETURN	shift, and go to state 9
    ID_CAP	shift, and go to state 10
    ID_LOW	shift, and go to state 11
    ID_FUNC	shift, and go to state 12
    ID_VAR_FIELD	shift, and go to state 13
    NIL 	shift, and go to state 14
    TRUE	shift, and go to state 15
    FALSE	shift, and go to state 16
    IF  	shift, and go to state 17
    UNLESS	shift, and go to state 18
    '-' 	shift, and go to state 19
    '!' 	shift, and go to state 20
    '[' 	shift, and go to state 21
    '(' 	shift, and go to state 22

    $default	reduce using rule 38 (stmt)

    id  	go to state 23
    expr	go to state 24
    stmt	go to state 25
    stmt_seq	go to state 139
    method_def	go to state 27
    while_stmt	go to state 28
    until_stmt	go to state 29
    if_stmt	go to state 30
    unless_stmt	go to state 31
    class_def	go to state 32



state 125

    expr  ->  '[' eln expr_seq eln ']' .   (rule 23)

    $default	reduce using rule 23 (expr)



state 126

    expr  ->  '(' eln expr eln ')' .   (rule 21)

    $default	reduce using rule 21 (expr)



state 127

    expr  ->  expr '.' id '(' expr_seq . ')'   (rule 31)
    expr_seqE  ->  expr_seq . ',' expr   (rule 37)

    ')' 	shift, and go to state 140
    ',' 	shift, and go to state 67



state 128

    expr  ->  expr '[' eln expr eln . ']'   (rule 22)

    ']' 	shift, and go to state 141



state 129

    method_def  ->  DEF eln id '(' method_def_param_seq eln . ')' stmt_seq END   (rule 49)

    ')' 	shift, and go to state 142



state 130

    stmt_seq  ->  stmt_seq . EOL stmt   (rule 48)
    method_def  ->  DEF eln id method_def_param_seq EOL stmt_seq . END   (rule 50)

    EOL 	shift, and go to state 60
    END 	shift, and go to state 143



state 131

    method_def_param_seqE  ->  method_def_param_seq ',' eln . ID_LOW   (rule 54)

    ID_LOW	shift, and go to state 144



state 132

    expr  ->  '(' eln expr eln . ')'   (rule 21)
    while_stmt  ->  WHILE eln '(' eln expr eln . ')' EOL stmt_seq END   (rule 56)

    ')' 	shift, and go to state 145



state 133

    while_stmt  ->  WHILE eln expr DO stmt_seq END .   (rule 55)

    $default	reduce using rule 55 (while_stmt)



state 134

    expr  ->  '(' eln expr eln . ')'   (rule 21)
    until_stmt  ->  UNTIL eln '(' eln expr eln . ')' EOL stmt_seq END   (rule 58)

    ')' 	shift, and go to state 146



state 135

    until_stmt  ->  UNTIL eln expr DO stmt_seq END .   (rule 57)

    $default	reduce using rule 57 (until_stmt)



state 136

    class_def  ->  CLASS eln ID_CAP EOL stmt_seq END .   (rule 68)

    $default	reduce using rule 68 (class_def)



state 137

    class_def  ->  CLASS eln ID_CAP '<' eln ID_CAP . EOL stmt_seq END   (rule 67)

    EOL 	shift, and go to state 147



state 138

    stmt_seq  ->  stmt_seq . EOL stmt   (rule 48)
    if_stmt  ->  IF eln expr eln THEN stmt_seq . elsif_seq END   (rule 63)
    if_stmt  ->  IF eln expr eln THEN stmt_seq . elsif_seq ELSE stmt_seq END   (rule 64)

    EOL 	shift, and go to state 60
    ELSIF	shift, and go to state 148

    $default	reduce using rule 59 (elsif_seq)

    elsif_seq	go to state 149
    elsif_seqE	go to state 150



state 139

    stmt_seq  ->  stmt_seq . EOL stmt   (rule 48)
    unless_stmt  ->  UNLESS eln expr eln THEN stmt_seq . END   (rule 65)
    unless_stmt  ->  UNLESS eln expr eln THEN stmt_seq . ELSE stmt_seq END   (rule 66)

    EOL 	shift, and go to state 60
    END 	shift, and go to state 151
    ELSE	shift, and go to state 152



state 140

    expr  ->  expr '.' id '(' expr_seq ')' .   (rule 31)

    $default	reduce using rule 31 (expr)



state 141

    expr  ->  expr '[' eln expr eln ']' .   (rule 22)

    $default	reduce using rule 22 (expr)



state 142

    method_def  ->  DEF eln id '(' method_def_param_seq eln ')' . stmt_seq END   (rule 49)

    INT 	shift, and go to state 1
    STRING	shift, and go to state 2
    DEF 	shift, and go to state 3
    WHILE	shift, and go to state 4
    UNTIL	shift, and go to state 5
    CLASS	shift, and go to state 6
    SELF	shift, and go to state 7
    SUPER	shift, and go to state 8
    RETURN	shift, and go to state 9
    ID_CAP	shift, and go to state 10
    ID_LOW	shift, and go to state 11
    ID_FUNC	shift, and go to state 12
    ID_VAR_FIELD	shift, and go to state 13
    NIL 	shift, and go to state 14
    TRUE	shift, and go to state 15
    FALSE	shift, and go to state 16
    IF  	shift, and go to state 17
    UNLESS	shift, and go to state 18
    '-' 	shift, and go to state 19
    '!' 	shift, and go to state 20
    '[' 	shift, and go to state 21
    '(' 	shift, and go to state 22

    $default	reduce using rule 38 (stmt)

    id  	go to state 23
    expr	go to state 24
    stmt	go to state 25
    stmt_seq	go to state 153
    method_def	go to state 27
    while_stmt	go to state 28
    until_stmt	go to state 29
    if_stmt	go to state 30
    unless_stmt	go to state 31
    class_def	go to state 32



state 143

    method_def  ->  DEF eln id method_def_param_seq EOL stmt_seq END .   (rule 50)

    $default	reduce using rule 50 (method_def)



state 144

    method_def_param_seqE  ->  method_def_param_seq ',' eln ID_LOW .   (rule 54)

    $default	reduce using rule 54 (method_def_param_seqE)



state 145

    expr  ->  '(' eln expr eln ')' .   (rule 21)
    while_stmt  ->  WHILE eln '(' eln expr eln ')' . EOL stmt_seq END   (rule 56)

    EOL 	shift, and go to state 154

    $default	reduce using rule 21 (expr)



state 146

    expr  ->  '(' eln expr eln ')' .   (rule 21)
    until_stmt  ->  UNTIL eln '(' eln expr eln ')' . EOL stmt_seq END   (rule 58)

    EOL 	shift, and go to state 155

    $default	reduce using rule 21 (expr)



state 147

    class_def  ->  CLASS eln ID_CAP '<' eln ID_CAP EOL . stmt_seq END   (rule 67)

    INT 	shift, and go to state 1
    STRING	shift, and go to state 2
    DEF 	shift, and go to state 3
    WHILE	shift, and go to state 4
    UNTIL	shift, and go to state 5
    CLASS	shift, and go to state 6
    SELF	shift, and go to state 7
    SUPER	shift, and go to state 8
    RETURN	shift, and go to state 9
    ID_CAP	shift, and go to state 10
    ID_LOW	shift, and go to state 11
    ID_FUNC	shift, and go to state 12
    ID_VAR_FIELD	shift, and go to state 13
    NIL 	shift, and go to state 14
    TRUE	shift, and go to state 15
    FALSE	shift, and go to state 16
    IF  	shift, and go to state 17
    UNLESS	shift, and go to state 18
    '-' 	shift, and go to state 19
    '!' 	shift, and go to state 20
    '[' 	shift, and go to state 21
    '(' 	shift, and go to state 22

    $default	reduce using rule 38 (stmt)

    id  	go to state 23
    expr	go to state 24
    stmt	go to state 25
    stmt_seq	go to state 156
    method_def	go to state 27
    while_stmt	go to state 28
    until_stmt	go to state 29
    if_stmt	go to state 30
    unless_stmt	go to state 31
    class_def	go to state 32



state 148

    elsif_seqE  ->  ELSIF . expr THEN stmt_seq   (rule 61)

    INT 	shift, and go to state 1
    STRING	shift, and go to state 2
    SELF	shift, and go to state 7
    SUPER	shift, and go to state 8
    ID_CAP	shift, and go to state 10
    ID_LOW	shift, and go to state 11
    ID_FUNC	shift, and go to state 12
    ID_VAR_FIELD	shift, and go to state 13
    NIL 	shift, and go to state 14
    TRUE	shift, and go to state 15
    FALSE	shift, and go to state 16
    '-' 	shift, and go to state 19
    '!' 	shift, and go to state 20
    '[' 	shift, and go to state 21
    '(' 	shift, and go to state 22

    id  	go to state 23
    expr	go to state 157



state 149

    if_stmt  ->  IF eln expr eln THEN stmt_seq elsif_seq . END   (rule 63)
    if_stmt  ->  IF eln expr eln THEN stmt_seq elsif_seq . ELSE stmt_seq END   (rule 64)

    END 	shift, and go to state 158
    ELSE	shift, and go to state 159



state 150

    elsif_seq  ->  elsif_seqE .   (rule 60)
    elsif_seqE  ->  elsif_seqE . ELSIF expr THEN stmt_seq   (rule 62)

    ELSIF	shift, and go to state 160

    $default	reduce using rule 60 (elsif_seq)



state 151

    unless_stmt  ->  UNLESS eln expr eln THEN stmt_seq END .   (rule 65)

    $default	reduce using rule 65 (unless_stmt)



state 152

    unless_stmt  ->  UNLESS eln expr eln THEN stmt_seq ELSE . stmt_seq END   (rule 66)

    INT 	shift, and go to state 1
    STRING	shift, and go to state 2
    DEF 	shift, and go to state 3
    WHILE	shift, and go to state 4
    UNTIL	shift, and go to state 5
    CLASS	shift, and go to state 6
    SELF	shift, and go to state 7
    SUPER	shift, and go to state 8
    RETURN	shift, and go to state 9
    ID_CAP	shift, and go to state 10
    ID_LOW	shift, and go to state 11
    ID_FUNC	shift, and go to state 12
    ID_VAR_FIELD	shift, and go to state 13
    NIL 	shift, and go to state 14
    TRUE	shift, and go to state 15
    FALSE	shift, and go to state 16
    IF  	shift, and go to state 17
    UNLESS	shift, and go to state 18
    '-' 	shift, and go to state 19
    '!' 	shift, and go to state 20
    '[' 	shift, and go to state 21
    '(' 	shift, and go to state 22

    $default	reduce using rule 38 (stmt)

    id  	go to state 23
    expr	go to state 24
    stmt	go to state 25
    stmt_seq	go to state 161
    method_def	go to state 27
    while_stmt	go to state 28
    until_stmt	go to state 29
    if_stmt	go to state 30
    unless_stmt	go to state 31
    class_def	go to state 32



state 153

    stmt_seq  ->  stmt_seq . EOL stmt   (rule 48)
    method_def  ->  DEF eln id '(' method_def_param_seq eln ')' stmt_seq . END   (rule 49)

    EOL 	shift, and go to state 60
    END 	shift, and go to state 162



state 154

    while_stmt  ->  WHILE eln '(' eln expr eln ')' EOL . stmt_seq END   (rule 56)

    INT 	shift, and go to state 1
    STRING	shift, and go to state 2
    DEF 	shift, and go to state 3
    WHILE	shift, and go to state 4
    UNTIL	shift, and go to state 5
    CLASS	shift, and go to state 6
    SELF	shift, and go to state 7
    SUPER	shift, and go to state 8
    RETURN	shift, and go to state 9
    ID_CAP	shift, and go to state 10
    ID_LOW	shift, and go to state 11
    ID_FUNC	shift, and go to state 12
    ID_VAR_FIELD	shift, and go to state 13
    NIL 	shift, and go to state 14
    TRUE	shift, and go to state 15
    FALSE	shift, and go to state 16
    IF  	shift, and go to state 17
    UNLESS	shift, and go to state 18
    '-' 	shift, and go to state 19
    '!' 	shift, and go to state 20
    '[' 	shift, and go to state 21
    '(' 	shift, and go to state 22

    $default	reduce using rule 38 (stmt)

    id  	go to state 23
    expr	go to state 24
    stmt	go to state 25
    stmt_seq	go to state 163
    method_def	go to state 27
    while_stmt	go to state 28
    until_stmt	go to state 29
    if_stmt	go to state 30
    unless_stmt	go to state 31
    class_def	go to state 32



state 155

    until_stmt  ->  UNTIL eln '(' eln expr eln ')' EOL . stmt_seq END   (rule 58)

    INT 	shift, and go to state 1
    STRING	shift, and go to state 2
    DEF 	shift, and go to state 3
    WHILE	shift, and go to state 4
    UNTIL	shift, and go to state 5
    CLASS	shift, and go to state 6
    SELF	shift, and go to state 7
    SUPER	shift, and go to state 8
    RETURN	shift, and go to state 9
    ID_CAP	shift, and go to state 10
    ID_LOW	shift, and go to state 11
    ID_FUNC	shift, and go to state 12
    ID_VAR_FIELD	shift, and go to state 13
    NIL 	shift, and go to state 14
    TRUE	shift, and go to state 15
    FALSE	shift, and go to state 16
    IF  	shift, and go to state 17
    UNLESS	shift, and go to state 18
    '-' 	shift, and go to state 19
    '!' 	shift, and go to state 20
    '[' 	shift, and go to state 21
    '(' 	shift, and go to state 22

    $default	reduce using rule 38 (stmt)

    id  	go to state 23
    expr	go to state 24
    stmt	go to state 25
    stmt_seq	go to state 164
    method_def	go to state 27
    while_stmt	go to state 28
    until_stmt	go to state 29
    if_stmt	go to state 30
    unless_stmt	go to state 31
    class_def	go to state 32



state 156

    stmt_seq  ->  stmt_seq . EOL stmt   (rule 48)
    class_def  ->  CLASS eln ID_CAP '<' eln ID_CAP EOL stmt_seq . END   (rule 67)

    EOL 	shift, and go to state 60
    END 	shift, and go to state 165



state 157

    expr  ->  expr . '+' eln expr   (rule 8)
    expr  ->  expr . '-' eln expr   (rule 9)
    expr  ->  expr . '*' eln expr   (rule 10)
    expr  ->  expr . '/' eln expr   (rule 11)
    expr  ->  expr . '<' eln expr   (rule 12)
    expr  ->  expr . '>' eln expr   (rule 13)
    expr  ->  expr . EQUAL eln expr   (rule 14)
    expr  ->  expr . NOTEQUAL eln expr   (rule 15)
    expr  ->  expr . OR eln expr   (rule 16)
    expr  ->  expr . AND eln expr   (rule 17)
    expr  ->  expr . '=' eln expr   (rule 19)
    expr  ->  expr . '[' eln expr eln ']'   (rule 22)
    expr  ->  expr . '.' id   (rule 30)
    expr  ->  expr . '.' id '(' expr_seq ')'   (rule 31)
    elsif_seqE  ->  ELSIF expr . THEN stmt_seq   (rule 61)

    EQUAL	shift, and go to state 47
    NOTEQUAL	shift, and go to state 48
    OR  	shift, and go to state 49
    AND 	shift, and go to state 50
    THEN	shift, and go to state 166
    '=' 	shift, and go to state 51
    '<' 	shift, and go to state 52
    '>' 	shift, and go to state 53
    '-' 	shift, and go to state 54
    '+' 	shift, and go to state 55
    '*' 	shift, and go to state 56
    '/' 	shift, and go to state 57
    '.' 	shift, and go to state 58
    '[' 	shift, and go to state 59



state 158

    if_stmt  ->  IF eln expr eln THEN stmt_seq elsif_seq END .   (rule 63)

    $default	reduce using rule 63 (if_stmt)



state 159

    if_stmt  ->  IF eln expr eln THEN stmt_seq elsif_seq ELSE . stmt_seq END   (rule 64)

    INT 	shift, and go to state 1
    STRING	shift, and go to state 2
    DEF 	shift, and go to state 3
    WHILE	shift, and go to state 4
    UNTIL	shift, and go to state 5
    CLASS	shift, and go to state 6
    SELF	shift, and go to state 7
    SUPER	shift, and go to state 8
    RETURN	shift, and go to state 9
    ID_CAP	shift, and go to state 10
    ID_LOW	shift, and go to state 11
    ID_FUNC	shift, and go to state 12
    ID_VAR_FIELD	shift, and go to state 13
    NIL 	shift, and go to state 14
    TRUE	shift, and go to state 15
    FALSE	shift, and go to state 16
    IF  	shift, and go to state 17
    UNLESS	shift, and go to state 18
    '-' 	shift, and go to state 19
    '!' 	shift, and go to state 20
    '[' 	shift, and go to state 21
    '(' 	shift, and go to state 22

    $default	reduce using rule 38 (stmt)

    id  	go to state 23
    expr	go to state 24
    stmt	go to state 25
    stmt_seq	go to state 167
    method_def	go to state 27
    while_stmt	go to state 28
    until_stmt	go to state 29
    if_stmt	go to state 30
    unless_stmt	go to state 31
    class_def	go to state 32



state 160

    elsif_seqE  ->  elsif_seqE ELSIF . expr THEN stmt_seq   (rule 62)

    INT 	shift, and go to state 1
    STRING	shift, and go to state 2
    SELF	shift, and go to state 7
    SUPER	shift, and go to state 8
    ID_CAP	shift, and go to state 10
    ID_LOW	shift, and go to state 11
    ID_FUNC	shift, and go to state 12
    ID_VAR_FIELD	shift, and go to state 13
    NIL 	shift, and go to state 14
    TRUE	shift, and go to state 15
    FALSE	shift, and go to state 16
    '-' 	shift, and go to state 19
    '!' 	shift, and go to state 20
    '[' 	shift, and go to state 21
    '(' 	shift, and go to state 22

    id  	go to state 23
    expr	go to state 168



state 161

    stmt_seq  ->  stmt_seq . EOL stmt   (rule 48)
    unless_stmt  ->  UNLESS eln expr eln THEN stmt_seq ELSE stmt_seq . END   (rule 66)

    EOL 	shift, and go to state 60
    END 	shift, and go to state 169



state 162

    method_def  ->  DEF eln id '(' method_def_param_seq eln ')' stmt_seq END .   (rule 49)

    $default	reduce using rule 49 (method_def)



state 163

    stmt_seq  ->  stmt_seq . EOL stmt   (rule 48)
    while_stmt  ->  WHILE eln '(' eln expr eln ')' EOL stmt_seq . END   (rule 56)

    EOL 	shift, and go to state 60
    END 	shift, and go to state 170



state 164

    stmt_seq  ->  stmt_seq . EOL stmt   (rule 48)
    until_stmt  ->  UNTIL eln '(' eln expr eln ')' EOL stmt_seq . END   (rule 58)

    EOL 	shift, and go to state 60
    END 	shift, and go to state 171



state 165

    class_def  ->  CLASS eln ID_CAP '<' eln ID_CAP EOL stmt_seq END .   (rule 67)

    $default	reduce using rule 67 (class_def)



state 166

    elsif_seqE  ->  ELSIF expr THEN . stmt_seq   (rule 61)

    INT 	shift, and go to state 1
    STRING	shift, and go to state 2
    DEF 	shift, and go to state 3
    WHILE	shift, and go to state 4
    UNTIL	shift, and go to state 5
    CLASS	shift, and go to state 6
    SELF	shift, and go to state 7
    SUPER	shift, and go to state 8
    RETURN	shift, and go to state 9
    ID_CAP	shift, and go to state 10
    ID_LOW	shift, and go to state 11
    ID_FUNC	shift, and go to state 12
    ID_VAR_FIELD	shift, and go to state 13
    NIL 	shift, and go to state 14
    TRUE	shift, and go to state 15
    FALSE	shift, and go to state 16
    IF  	shift, and go to state 17
    UNLESS	shift, and go to state 18
    '-' 	shift, and go to state 19
    '!' 	shift, and go to state 20
    '[' 	shift, and go to state 21
    '(' 	shift, and go to state 22

    $default	reduce using rule 38 (stmt)

    id  	go to state 23
    expr	go to state 24
    stmt	go to state 25
    stmt_seq	go to state 172
    method_def	go to state 27
    while_stmt	go to state 28
    until_stmt	go to state 29
    if_stmt	go to state 30
    unless_stmt	go to state 31
    class_def	go to state 32



state 167

    stmt_seq  ->  stmt_seq . EOL stmt   (rule 48)
    if_stmt  ->  IF eln expr eln THEN stmt_seq elsif_seq ELSE stmt_seq . END   (rule 64)

    EOL 	shift, and go to state 60
    END 	shift, and go to state 173



state 168

    expr  ->  expr . '+' eln expr   (rule 8)
    expr  ->  expr . '-' eln expr   (rule 9)
    expr  ->  expr . '*' eln expr   (rule 10)
    expr  ->  expr . '/' eln expr   (rule 11)
    expr  ->  expr . '<' eln expr   (rule 12)
    expr  ->  expr . '>' eln expr   (rule 13)
    expr  ->  expr . EQUAL eln expr   (rule 14)
    expr  ->  expr . NOTEQUAL eln expr   (rule 15)
    expr  ->  expr . OR eln expr   (rule 16)
    expr  ->  expr . AND eln expr   (rule 17)
    expr  ->  expr . '=' eln expr   (rule 19)
    expr  ->  expr . '[' eln expr eln ']'   (rule 22)
    expr  ->  expr . '.' id   (rule 30)
    expr  ->  expr . '.' id '(' expr_seq ')'   (rule 31)
    elsif_seqE  ->  elsif_seqE ELSIF expr . THEN stmt_seq   (rule 62)

    EQUAL	shift, and go to state 47
    NOTEQUAL	shift, and go to state 48
    OR  	shift, and go to state 49
    AND 	shift, and go to state 50
    THEN	shift, and go to state 174
    '=' 	shift, and go to state 51
    '<' 	shift, and go to state 52
    '>' 	shift, and go to state 53
    '-' 	shift, and go to state 54
    '+' 	shift, and go to state 55
    '*' 	shift, and go to state 56
    '/' 	shift, and go to state 57
    '.' 	shift, and go to state 58
    '[' 	shift, and go to state 59



state 169

    unless_stmt  ->  UNLESS eln expr eln THEN stmt_seq ELSE stmt_seq END .   (rule 66)

    $default	reduce using rule 66 (unless_stmt)



state 170

    while_stmt  ->  WHILE eln '(' eln expr eln ')' EOL stmt_seq END .   (rule 56)

    $default	reduce using rule 56 (while_stmt)



state 171

    until_stmt  ->  UNTIL eln '(' eln expr eln ')' EOL stmt_seq END .   (rule 58)

    $default	reduce using rule 58 (until_stmt)



state 172

    stmt_seq  ->  stmt_seq . EOL stmt   (rule 48)
    elsif_seqE  ->  ELSIF expr THEN stmt_seq .   (rule 61)

    EOL 	shift, and go to state 60

    $default	reduce using rule 61 (elsif_seqE)



state 173

    if_stmt  ->  IF eln expr eln THEN stmt_seq elsif_seq ELSE stmt_seq END .   (rule 64)

    $default	reduce using rule 64 (if_stmt)



state 174

    elsif_seqE  ->  elsif_seqE ELSIF expr THEN . stmt_seq   (rule 62)

    INT 	shift, and go to state 1
    STRING	shift, and go to state 2
    DEF 	shift, and go to state 3
    WHILE	shift, and go to state 4
    UNTIL	shift, and go to state 5
    CLASS	shift, and go to state 6
    SELF	shift, and go to state 7
    SUPER	shift, and go to state 8
    RETURN	shift, and go to state 9
    ID_CAP	shift, and go to state 10
    ID_LOW	shift, and go to state 11
    ID_FUNC	shift, and go to state 12
    ID_VAR_FIELD	shift, and go to state 13
    NIL 	shift, and go to state 14
    TRUE	shift, and go to state 15
    FALSE	shift, and go to state 16
    IF  	shift, and go to state 17
    UNLESS	shift, and go to state 18
    '-' 	shift, and go to state 19
    '!' 	shift, and go to state 20
    '[' 	shift, and go to state 21
    '(' 	shift, and go to state 22

    $default	reduce using rule 38 (stmt)

    id  	go to state 23
    expr	go to state 24
    stmt	go to state 25
    stmt_seq	go to state 175
    method_def	go to state 27
    while_stmt	go to state 28
    until_stmt	go to state 29
    if_stmt	go to state 30
    unless_stmt	go to state 31
    class_def	go to state 32



state 175

    stmt_seq  ->  stmt_seq . EOL stmt   (rule 48)
    elsif_seqE  ->  elsif_seqE ELSIF expr THEN stmt_seq .   (rule 62)

    EOL 	shift, and go to state 60

    $default	reduce using rule 62 (elsif_seqE)



state 176

    $   	go to state 177



state 177

    $   	go to state 178



state 178

    $default	accept
