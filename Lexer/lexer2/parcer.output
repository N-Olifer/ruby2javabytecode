Conflict in state 36 between rule 14 and token '-' resolved as reduce.
Conflict in state 36 between rule 14 and token '+' resolved as reduce.
Conflict in state 36 between rule 14 and token '*' resolved as reduce.
Conflict in state 36 between rule 14 and token '/' resolved as reduce.
Conflict in state 86 between rule 7 and token '-' resolved as reduce.
Conflict in state 86 between rule 7 and token '+' resolved as reduce.
Conflict in state 86 between rule 7 and token '*' resolved as shift.
Conflict in state 86 between rule 7 and token '/' resolved as shift.
Conflict in state 87 between rule 6 and token '-' resolved as reduce.
Conflict in state 87 between rule 6 and token '+' resolved as reduce.
Conflict in state 87 between rule 6 and token '*' resolved as shift.
Conflict in state 87 between rule 6 and token '/' resolved as shift.
Conflict in state 88 between rule 8 and token '-' resolved as reduce.
Conflict in state 88 between rule 8 and token '+' resolved as reduce.
Conflict in state 88 between rule 8 and token '*' resolved as reduce.
Conflict in state 88 between rule 8 and token '/' resolved as reduce.
Conflict in state 89 between rule 9 and token '-' resolved as reduce.
Conflict in state 89 between rule 9 and token '+' resolved as reduce.
Conflict in state 89 between rule 9 and token '*' resolved as reduce.
Conflict in state 89 between rule 9 and token '/' resolved as reduce.
State 15 contains 1 shift/reduce conflict.
State 36 contains 4 shift/reduce conflicts.
State 78 contains 1 shift/reduce conflict.
State 80 contains 1 shift/reduce conflict.
State 85 contains 8 shift/reduce conflicts.
State 86 contains 4 shift/reduce conflicts.
State 87 contains 4 shift/reduce conflicts.
State 88 contains 4 shift/reduce conflicts.
State 89 contains 4 shift/reduce conflicts.
State 90 contains 8 shift/reduce conflicts.
State 91 contains 8 shift/reduce conflicts.
State 92 contains 8 shift/reduce conflicts.
State 114 contains 1 shift/reduce conflict.

Grammar
rule 1    program -> stmt_seq
rule 2    eln ->		/* empty */
rule 3    eln -> EOL
rule 4    id -> ID_CAP
rule 5    id -> ID_LOW
rule 6    expr -> expr '+' eln expr
rule 7    expr -> expr '-' eln expr
rule 8    expr -> expr '*' eln expr
rule 9    expr -> expr '/' eln expr
rule 10   expr -> expr '<' eln expr
rule 11   expr -> expr '>' eln expr
rule 12   expr -> expr EQUAL eln expr
rule 13   expr -> expr '=' eln expr
rule 14   expr -> '-' expr
rule 15   expr -> '(' eln expr eln ')'
rule 16   expr -> INT
rule 17   expr -> var_id
rule 18   expr -> method_call
rule 19   expr -> SELF
rule 20   var_id -> var_id_simple
rule 21   var_id -> var_id '.' var_id_simple
rule 22   var_id_simple -> id
rule 23   var_id_simple -> ID_VAR_FIELD
rule 24   expr_seq ->		/* empty */
rule 25   expr_seq -> expr_seqE
rule 26   expr_seqE -> expr
rule 27   expr_seqE -> expr_seq ',' expr
rule 28   stmt -> expr
rule 29   stmt -> method_def
rule 30   stmt -> class_def
rule 31   stmt -> while_stmt
rule 32   stmt -> until_stmt
rule 33   stmt -> RETURN expr_seq
rule 34   stmt_seq ->		/* empty */
rule 35   stmt_seq -> stmt_seqE
rule 36   stmt_seqE -> stmt
rule 37   stmt_seqE -> stmt_seq EOL stmt
rule 38   method_call -> method_id '(' expr_seq ')'
rule 39   method_call -> id '.' method_call
rule 40   method_def -> DEF eln method_id '(' method_def_param_seq eln ')' eln stmt_seq eln END
rule 41   method_def -> DEF eln method_id method_def_param_seq EOL stmt_seq eln END
rule 42   method_id -> id
rule 43   method_id -> ID_FUNC
rule 44   method_id -> SUPER
rule 45   method_def_param_seq ->		/* empty */
rule 46   method_def_param_seq -> method_def_param_seqE
rule 47   method_def_param_seqE -> ID_LOW
rule 48   method_def_param_seqE -> method_def_param_seq ',' eln ID_LOW
rule 49   while_stmt -> WHILE eln expr DO eln stmt_seq eln END
rule 50   while_stmt -> WHILE eln '(' eln expr eln ')' EOL stmt_seq eln END
rule 51   until_stmt -> UNTIL eln expr DO eln stmt_seq eln END
rule 52   until_stmt -> UNTIL eln '(' eln expr eln ')' EOL stmt_seq eln END
rule 53   class_def -> CLASS eln ID_CAP '<' eln ID_CAP EOL stmt_seq eln END
rule 54   class_def -> CLASS eln ID_CAP EOL stmt_seq eln END

Terminals, with rules where they appear

$ (-1)
'(' (40) 15 38 40 50 52
')' (41) 15 38 40 50 52
'*' (42) 8
'+' (43) 6
',' (44) 27 48
'-' (45) 7 14
'.' (46) 21 39
'/' (47) 9
'<' (60) 10 53
'=' (61) 13
'>' (62) 11
error (256)
INT (258) 16
EOL (259) 3 37 41 50 52 53 54
DEF (260) 40 41
END (261) 40 41 49 50 51 52 53 54
WHILE (262) 49 50
DO (263) 49 51
UNTIL (264) 51 52
CLASS (265) 53 54
SELF (266) 19
SUPER (267) 44
RETURN (268) 33
ID_CAP (269) 4 53 54
ID_LOW (270) 5 47 48
ID_FUNC (271) 43
ID_VAR_FIELD (272) 23
EQUAL (273) 12
UMINUS (274)

Nonterminals, with rules where they appear

program (31)
    on left: 1
eln (32)
    on left: 2 3, on right: 6 7 8 9 10 11 12 13 15 40 41 48 49 50 51
    52 53 54
id (33)
    on left: 4 5, on right: 22 39 42
expr (34)
    on left: 6 7 8 9 10 11 12 13 14 15 16 17 18 19,
    on right: 6 7 8 9 10 11 12 13 14 15 26 27 28 49 50 51 52
var_id (35)
    on left: 20 21, on right: 17 21
var_id_simple (36)
    on left: 22 23, on right: 20 21
expr_seq (37)
    on left: 24 25, on right: 27 33 38
expr_seqE (38)
    on left: 26 27, on right: 25
stmt (39)
    on left: 28 29 30 31 32 33, on right: 36 37
stmt_seq (40)
    on left: 34 35, on right: 1 37 40 41 49 50 51 52 53 54
stmt_seqE (41)
    on left: 36 37, on right: 35
method_call (42)
    on left: 38 39, on right: 18 39
method_def (43)
    on left: 40 41, on right: 29
method_id (44)
    on left: 42 43 44, on right: 38 40 41
method_def_param_seq (45)
    on left: 45 46, on right: 40 41 48
method_def_param_seqE (46)
    on left: 47 48, on right: 46
while_stmt (47)
    on left: 49 50, on right: 31
until_stmt (48)
    on left: 51 52, on right: 32
class_def (49)
    on left: 53 54, on right: 30


state 0

    INT 	shift, and go to state 1
    DEF 	shift, and go to state 2
    WHILE	shift, and go to state 3
    UNTIL	shift, and go to state 4
    CLASS	shift, and go to state 5
    SELF	shift, and go to state 6
    SUPER	shift, and go to state 7
    RETURN	shift, and go to state 8
    ID_CAP	shift, and go to state 9
    ID_LOW	shift, and go to state 10
    ID_FUNC	shift, and go to state 11
    ID_VAR_FIELD	shift, and go to state 12
    '-' 	shift, and go to state 13
    '(' 	shift, and go to state 14

    $default	reduce using rule 34 (stmt_seq)

    program	go to state 141
    id  	go to state 15
    expr	go to state 16
    var_id	go to state 17
    var_id_simple	go to state 18
    stmt	go to state 19
    stmt_seq	go to state 20
    stmt_seqE	go to state 21
    method_call	go to state 22
    method_def	go to state 23
    method_id	go to state 24
    while_stmt	go to state 25
    until_stmt	go to state 26
    class_def	go to state 27



state 1

    expr  ->  INT .   (rule 16)

    $default	reduce using rule 16 (expr)



state 2

    method_def  ->  DEF . eln method_id '(' method_def_param_seq eln ')' eln stmt_seq eln END   (rule 40)
    method_def  ->  DEF . eln method_id method_def_param_seq EOL stmt_seq eln END   (rule 41)

    EOL 	shift, and go to state 28

    $default	reduce using rule 2 (eln)

    eln 	go to state 29



state 3

    while_stmt  ->  WHILE . eln expr DO eln stmt_seq eln END   (rule 49)
    while_stmt  ->  WHILE . eln '(' eln expr eln ')' EOL stmt_seq eln END   (rule 50)

    EOL 	shift, and go to state 28

    $default	reduce using rule 2 (eln)

    eln 	go to state 30



state 4

    until_stmt  ->  UNTIL . eln expr DO eln stmt_seq eln END   (rule 51)
    until_stmt  ->  UNTIL . eln '(' eln expr eln ')' EOL stmt_seq eln END   (rule 52)

    EOL 	shift, and go to state 28

    $default	reduce using rule 2 (eln)

    eln 	go to state 31



state 5

    class_def  ->  CLASS . eln ID_CAP '<' eln ID_CAP EOL stmt_seq eln END   (rule 53)
    class_def  ->  CLASS . eln ID_CAP EOL stmt_seq eln END   (rule 54)

    EOL 	shift, and go to state 28

    $default	reduce using rule 2 (eln)

    eln 	go to state 32



state 6

    expr  ->  SELF .   (rule 19)

    $default	reduce using rule 19 (expr)



state 7

    method_id  ->  SUPER .   (rule 44)

    $default	reduce using rule 44 (method_id)



state 8

    stmt  ->  RETURN . expr_seq   (rule 33)

    INT 	shift, and go to state 1
    SELF	shift, and go to state 6
    SUPER	shift, and go to state 7
    ID_CAP	shift, and go to state 9
    ID_LOW	shift, and go to state 10
    ID_FUNC	shift, and go to state 11
    ID_VAR_FIELD	shift, and go to state 12
    '-' 	shift, and go to state 13
    '(' 	shift, and go to state 14

    $default	reduce using rule 24 (expr_seq)

    id  	go to state 15
    expr	go to state 33
    var_id	go to state 17
    var_id_simple	go to state 18
    expr_seq	go to state 34
    expr_seqE	go to state 35
    method_call	go to state 22
    method_id	go to state 24



state 9

    id  ->  ID_CAP .   (rule 4)

    $default	reduce using rule 4 (id)



state 10

    id  ->  ID_LOW .   (rule 5)

    $default	reduce using rule 5 (id)



state 11

    method_id  ->  ID_FUNC .   (rule 43)

    $default	reduce using rule 43 (method_id)



state 12

    var_id_simple  ->  ID_VAR_FIELD .   (rule 23)

    $default	reduce using rule 23 (var_id_simple)



state 13

    expr  ->  '-' . expr   (rule 14)

    INT 	shift, and go to state 1
    SELF	shift, and go to state 6
    SUPER	shift, and go to state 7
    ID_CAP	shift, and go to state 9
    ID_LOW	shift, and go to state 10
    ID_FUNC	shift, and go to state 11
    ID_VAR_FIELD	shift, and go to state 12
    '-' 	shift, and go to state 13
    '(' 	shift, and go to state 14

    id  	go to state 15
    expr	go to state 36
    var_id	go to state 17
    var_id_simple	go to state 18
    method_call	go to state 22
    method_id	go to state 24



state 14

    expr  ->  '(' . eln expr eln ')'   (rule 15)

    EOL 	shift, and go to state 28

    $default	reduce using rule 2 (eln)

    eln 	go to state 37



state 15

    var_id_simple  ->  id .   (rule 22)
    method_call  ->  id . '.' method_call   (rule 39)
    method_id  ->  id .   (rule 42)

    '.' 	shift, and go to state 38

    '(' 	reduce using rule 42 (method_id)
    '.' 	[reduce using rule 22 (var_id_simple)]
    $default	reduce using rule 22 (var_id_simple)



state 16

    expr  ->  expr . '+' eln expr   (rule 6)
    expr  ->  expr . '-' eln expr   (rule 7)
    expr  ->  expr . '*' eln expr   (rule 8)
    expr  ->  expr . '/' eln expr   (rule 9)
    expr  ->  expr . '<' eln expr   (rule 10)
    expr  ->  expr . '>' eln expr   (rule 11)
    expr  ->  expr . EQUAL eln expr   (rule 12)
    expr  ->  expr . '=' eln expr   (rule 13)
    stmt  ->  expr .   (rule 28)

    EQUAL	shift, and go to state 39
    '-' 	shift, and go to state 40
    '+' 	shift, and go to state 41
    '*' 	shift, and go to state 42
    '/' 	shift, and go to state 43
    '<' 	shift, and go to state 44
    '>' 	shift, and go to state 45
    '=' 	shift, and go to state 46

    $default	reduce using rule 28 (stmt)



state 17

    expr  ->  var_id .   (rule 17)
    var_id  ->  var_id . '.' var_id_simple   (rule 21)

    '.' 	shift, and go to state 47

    $default	reduce using rule 17 (expr)



state 18

    var_id  ->  var_id_simple .   (rule 20)

    $default	reduce using rule 20 (var_id)



state 19

    stmt_seqE  ->  stmt .   (rule 36)

    $default	reduce using rule 36 (stmt_seqE)



state 20

    program  ->  stmt_seq .   (rule 1)
    stmt_seqE  ->  stmt_seq . EOL stmt   (rule 37)

    EOL 	shift, and go to state 48

    $default	reduce using rule 1 (program)



state 21

    stmt_seq  ->  stmt_seqE .   (rule 35)

    $default	reduce using rule 35 (stmt_seq)



state 22

    expr  ->  method_call .   (rule 18)

    $default	reduce using rule 18 (expr)



state 23

    stmt  ->  method_def .   (rule 29)

    $default	reduce using rule 29 (stmt)



state 24

    method_call  ->  method_id . '(' expr_seq ')'   (rule 38)

    '(' 	shift, and go to state 49



state 25

    stmt  ->  while_stmt .   (rule 31)

    $default	reduce using rule 31 (stmt)



state 26

    stmt  ->  until_stmt .   (rule 32)

    $default	reduce using rule 32 (stmt)



state 27

    stmt  ->  class_def .   (rule 30)

    $default	reduce using rule 30 (stmt)



state 28

    eln  ->  EOL .   (rule 3)

    $default	reduce using rule 3 (eln)



state 29

    method_def  ->  DEF eln . method_id '(' method_def_param_seq eln ')' eln stmt_seq eln END   (rule 40)
    method_def  ->  DEF eln . method_id method_def_param_seq EOL stmt_seq eln END   (rule 41)

    SUPER	shift, and go to state 7
    ID_CAP	shift, and go to state 9
    ID_LOW	shift, and go to state 10
    ID_FUNC	shift, and go to state 11

    id  	go to state 50
    method_id	go to state 51



state 30

    while_stmt  ->  WHILE eln . expr DO eln stmt_seq eln END   (rule 49)
    while_stmt  ->  WHILE eln . '(' eln expr eln ')' EOL stmt_seq eln END   (rule 50)

    INT 	shift, and go to state 1
    SELF	shift, and go to state 6
    SUPER	shift, and go to state 7
    ID_CAP	shift, and go to state 9
    ID_LOW	shift, and go to state 10
    ID_FUNC	shift, and go to state 11
    ID_VAR_FIELD	shift, and go to state 12
    '-' 	shift, and go to state 13
    '(' 	shift, and go to state 52

    id  	go to state 15
    expr	go to state 53
    var_id	go to state 17
    var_id_simple	go to state 18
    method_call	go to state 22
    method_id	go to state 24



state 31

    until_stmt  ->  UNTIL eln . expr DO eln stmt_seq eln END   (rule 51)
    until_stmt  ->  UNTIL eln . '(' eln expr eln ')' EOL stmt_seq eln END   (rule 52)

    INT 	shift, and go to state 1
    SELF	shift, and go to state 6
    SUPER	shift, and go to state 7
    ID_CAP	shift, and go to state 9
    ID_LOW	shift, and go to state 10
    ID_FUNC	shift, and go to state 11
    ID_VAR_FIELD	shift, and go to state 12
    '-' 	shift, and go to state 13
    '(' 	shift, and go to state 54

    id  	go to state 15
    expr	go to state 55
    var_id	go to state 17
    var_id_simple	go to state 18
    method_call	go to state 22
    method_id	go to state 24



state 32

    class_def  ->  CLASS eln . ID_CAP '<' eln ID_CAP EOL stmt_seq eln END   (rule 53)
    class_def  ->  CLASS eln . ID_CAP EOL stmt_seq eln END   (rule 54)

    ID_CAP	shift, and go to state 56



state 33

    expr  ->  expr . '+' eln expr   (rule 6)
    expr  ->  expr . '-' eln expr   (rule 7)
    expr  ->  expr . '*' eln expr   (rule 8)
    expr  ->  expr . '/' eln expr   (rule 9)
    expr  ->  expr . '<' eln expr   (rule 10)
    expr  ->  expr . '>' eln expr   (rule 11)
    expr  ->  expr . EQUAL eln expr   (rule 12)
    expr  ->  expr . '=' eln expr   (rule 13)
    expr_seqE  ->  expr .   (rule 26)

    EQUAL	shift, and go to state 39
    '-' 	shift, and go to state 40
    '+' 	shift, and go to state 41
    '*' 	shift, and go to state 42
    '/' 	shift, and go to state 43
    '<' 	shift, and go to state 44
    '>' 	shift, and go to state 45
    '=' 	shift, and go to state 46

    $default	reduce using rule 26 (expr_seqE)



state 34

    expr_seqE  ->  expr_seq . ',' expr   (rule 27)
    stmt  ->  RETURN expr_seq .   (rule 33)

    ',' 	shift, and go to state 57

    $default	reduce using rule 33 (stmt)



state 35

    expr_seq  ->  expr_seqE .   (rule 25)

    $default	reduce using rule 25 (expr_seq)



state 36

    expr  ->  expr . '+' eln expr   (rule 6)
    expr  ->  expr . '-' eln expr   (rule 7)
    expr  ->  expr . '*' eln expr   (rule 8)
    expr  ->  expr . '/' eln expr   (rule 9)
    expr  ->  expr . '<' eln expr   (rule 10)
    expr  ->  expr . '>' eln expr   (rule 11)
    expr  ->  expr . EQUAL eln expr   (rule 12)
    expr  ->  expr . '=' eln expr   (rule 13)
    expr  ->  '-' expr .   (rule 14)

    EQUAL	shift, and go to state 39
    '<' 	shift, and go to state 44
    '>' 	shift, and go to state 45
    '=' 	shift, and go to state 46

    EQUAL	[reduce using rule 14 (expr)]
    '<' 	[reduce using rule 14 (expr)]
    '>' 	[reduce using rule 14 (expr)]
    '=' 	[reduce using rule 14 (expr)]
    $default	reduce using rule 14 (expr)



state 37

    expr  ->  '(' eln . expr eln ')'   (rule 15)

    INT 	shift, and go to state 1
    SELF	shift, and go to state 6
    SUPER	shift, and go to state 7
    ID_CAP	shift, and go to state 9
    ID_LOW	shift, and go to state 10
    ID_FUNC	shift, and go to state 11
    ID_VAR_FIELD	shift, and go to state 12
    '-' 	shift, and go to state 13
    '(' 	shift, and go to state 14

    id  	go to state 15
    expr	go to state 58
    var_id	go to state 17
    var_id_simple	go to state 18
    method_call	go to state 22
    method_id	go to state 24



state 38

    method_call  ->  id '.' . method_call   (rule 39)

    SUPER	shift, and go to state 7
    ID_CAP	shift, and go to state 9
    ID_LOW	shift, and go to state 10
    ID_FUNC	shift, and go to state 11

    id  	go to state 59
    method_call	go to state 60
    method_id	go to state 24



state 39

    expr  ->  expr EQUAL . eln expr   (rule 12)

    EOL 	shift, and go to state 28

    $default	reduce using rule 2 (eln)

    eln 	go to state 61



state 40

    expr  ->  expr '-' . eln expr   (rule 7)

    EOL 	shift, and go to state 28

    $default	reduce using rule 2 (eln)

    eln 	go to state 62



state 41

    expr  ->  expr '+' . eln expr   (rule 6)

    EOL 	shift, and go to state 28

    $default	reduce using rule 2 (eln)

    eln 	go to state 63



state 42

    expr  ->  expr '*' . eln expr   (rule 8)

    EOL 	shift, and go to state 28

    $default	reduce using rule 2 (eln)

    eln 	go to state 64



state 43

    expr  ->  expr '/' . eln expr   (rule 9)

    EOL 	shift, and go to state 28

    $default	reduce using rule 2 (eln)

    eln 	go to state 65



state 44

    expr  ->  expr '<' . eln expr   (rule 10)

    EOL 	shift, and go to state 28

    $default	reduce using rule 2 (eln)

    eln 	go to state 66



state 45

    expr  ->  expr '>' . eln expr   (rule 11)

    EOL 	shift, and go to state 28

    $default	reduce using rule 2 (eln)

    eln 	go to state 67



state 46

    expr  ->  expr '=' . eln expr   (rule 13)

    EOL 	shift, and go to state 28

    $default	reduce using rule 2 (eln)

    eln 	go to state 68



state 47

    var_id  ->  var_id '.' . var_id_simple   (rule 21)

    ID_CAP	shift, and go to state 9
    ID_LOW	shift, and go to state 10
    ID_VAR_FIELD	shift, and go to state 12

    id  	go to state 69
    var_id_simple	go to state 70



state 48

    stmt_seqE  ->  stmt_seq EOL . stmt   (rule 37)

    INT 	shift, and go to state 1
    DEF 	shift, and go to state 2
    WHILE	shift, and go to state 3
    UNTIL	shift, and go to state 4
    CLASS	shift, and go to state 5
    SELF	shift, and go to state 6
    SUPER	shift, and go to state 7
    RETURN	shift, and go to state 8
    ID_CAP	shift, and go to state 9
    ID_LOW	shift, and go to state 10
    ID_FUNC	shift, and go to state 11
    ID_VAR_FIELD	shift, and go to state 12
    '-' 	shift, and go to state 13
    '(' 	shift, and go to state 14

    id  	go to state 15
    expr	go to state 16
    var_id	go to state 17
    var_id_simple	go to state 18
    stmt	go to state 71
    method_call	go to state 22
    method_def	go to state 23
    method_id	go to state 24
    while_stmt	go to state 25
    until_stmt	go to state 26
    class_def	go to state 27



state 49

    method_call  ->  method_id '(' . expr_seq ')'   (rule 38)

    INT 	shift, and go to state 1
    SELF	shift, and go to state 6
    SUPER	shift, and go to state 7
    ID_CAP	shift, and go to state 9
    ID_LOW	shift, and go to state 10
    ID_FUNC	shift, and go to state 11
    ID_VAR_FIELD	shift, and go to state 12
    '-' 	shift, and go to state 13
    '(' 	shift, and go to state 14

    $default	reduce using rule 24 (expr_seq)

    id  	go to state 15
    expr	go to state 33
    var_id	go to state 17
    var_id_simple	go to state 18
    expr_seq	go to state 72
    expr_seqE	go to state 35
    method_call	go to state 22
    method_id	go to state 24



state 50

    method_id  ->  id .   (rule 42)

    $default	reduce using rule 42 (method_id)



state 51

    method_def  ->  DEF eln method_id . '(' method_def_param_seq eln ')' eln stmt_seq eln END   (rule 40)
    method_def  ->  DEF eln method_id . method_def_param_seq EOL stmt_seq eln END   (rule 41)

    ID_LOW	shift, and go to state 73
    '(' 	shift, and go to state 74

    $default	reduce using rule 45 (method_def_param_seq)

    method_def_param_seq	go to state 75
    method_def_param_seqE	go to state 76



state 52

    expr  ->  '(' . eln expr eln ')'   (rule 15)
    while_stmt  ->  WHILE eln '(' . eln expr eln ')' EOL stmt_seq eln END   (rule 50)

    EOL 	shift, and go to state 28

    $default	reduce using rule 2 (eln)

    eln 	go to state 77



state 53

    expr  ->  expr . '+' eln expr   (rule 6)
    expr  ->  expr . '-' eln expr   (rule 7)
    expr  ->  expr . '*' eln expr   (rule 8)
    expr  ->  expr . '/' eln expr   (rule 9)
    expr  ->  expr . '<' eln expr   (rule 10)
    expr  ->  expr . '>' eln expr   (rule 11)
    expr  ->  expr . EQUAL eln expr   (rule 12)
    expr  ->  expr . '=' eln expr   (rule 13)
    while_stmt  ->  WHILE eln expr . DO eln stmt_seq eln END   (rule 49)

    DO  	shift, and go to state 78
    EQUAL	shift, and go to state 39
    '-' 	shift, and go to state 40
    '+' 	shift, and go to state 41
    '*' 	shift, and go to state 42
    '/' 	shift, and go to state 43
    '<' 	shift, and go to state 44
    '>' 	shift, and go to state 45
    '=' 	shift, and go to state 46



state 54

    expr  ->  '(' . eln expr eln ')'   (rule 15)
    until_stmt  ->  UNTIL eln '(' . eln expr eln ')' EOL stmt_seq eln END   (rule 52)

    EOL 	shift, and go to state 28

    $default	reduce using rule 2 (eln)

    eln 	go to state 79



state 55

    expr  ->  expr . '+' eln expr   (rule 6)
    expr  ->  expr . '-' eln expr   (rule 7)
    expr  ->  expr . '*' eln expr   (rule 8)
    expr  ->  expr . '/' eln expr   (rule 9)
    expr  ->  expr . '<' eln expr   (rule 10)
    expr  ->  expr . '>' eln expr   (rule 11)
    expr  ->  expr . EQUAL eln expr   (rule 12)
    expr  ->  expr . '=' eln expr   (rule 13)
    until_stmt  ->  UNTIL eln expr . DO eln stmt_seq eln END   (rule 51)

    DO  	shift, and go to state 80
    EQUAL	shift, and go to state 39
    '-' 	shift, and go to state 40
    '+' 	shift, and go to state 41
    '*' 	shift, and go to state 42
    '/' 	shift, and go to state 43
    '<' 	shift, and go to state 44
    '>' 	shift, and go to state 45
    '=' 	shift, and go to state 46



state 56

    class_def  ->  CLASS eln ID_CAP . '<' eln ID_CAP EOL stmt_seq eln END   (rule 53)
    class_def  ->  CLASS eln ID_CAP . EOL stmt_seq eln END   (rule 54)

    EOL 	shift, and go to state 81
    '<' 	shift, and go to state 82



state 57

    expr_seqE  ->  expr_seq ',' . expr   (rule 27)

    INT 	shift, and go to state 1
    SELF	shift, and go to state 6
    SUPER	shift, and go to state 7
    ID_CAP	shift, and go to state 9
    ID_LOW	shift, and go to state 10
    ID_FUNC	shift, and go to state 11
    ID_VAR_FIELD	shift, and go to state 12
    '-' 	shift, and go to state 13
    '(' 	shift, and go to state 14

    id  	go to state 15
    expr	go to state 83
    var_id	go to state 17
    var_id_simple	go to state 18
    method_call	go to state 22
    method_id	go to state 24



state 58

    expr  ->  expr . '+' eln expr   (rule 6)
    expr  ->  expr . '-' eln expr   (rule 7)
    expr  ->  expr . '*' eln expr   (rule 8)
    expr  ->  expr . '/' eln expr   (rule 9)
    expr  ->  expr . '<' eln expr   (rule 10)
    expr  ->  expr . '>' eln expr   (rule 11)
    expr  ->  expr . EQUAL eln expr   (rule 12)
    expr  ->  expr . '=' eln expr   (rule 13)
    expr  ->  '(' eln expr . eln ')'   (rule 15)

    EOL 	shift, and go to state 28
    EQUAL	shift, and go to state 39
    '-' 	shift, and go to state 40
    '+' 	shift, and go to state 41
    '*' 	shift, and go to state 42
    '/' 	shift, and go to state 43
    '<' 	shift, and go to state 44
    '>' 	shift, and go to state 45
    '=' 	shift, and go to state 46

    $default	reduce using rule 2 (eln)

    eln 	go to state 84



state 59

    method_call  ->  id . '.' method_call   (rule 39)
    method_id  ->  id .   (rule 42)

    '.' 	shift, and go to state 38

    $default	reduce using rule 42 (method_id)



state 60

    method_call  ->  id '.' method_call .   (rule 39)

    $default	reduce using rule 39 (method_call)



state 61

    expr  ->  expr EQUAL eln . expr   (rule 12)

    INT 	shift, and go to state 1
    SELF	shift, and go to state 6
    SUPER	shift, and go to state 7
    ID_CAP	shift, and go to state 9
    ID_LOW	shift, and go to state 10
    ID_FUNC	shift, and go to state 11
    ID_VAR_FIELD	shift, and go to state 12
    '-' 	shift, and go to state 13
    '(' 	shift, and go to state 14

    id  	go to state 15
    expr	go to state 85
    var_id	go to state 17
    var_id_simple	go to state 18
    method_call	go to state 22
    method_id	go to state 24



state 62

    expr  ->  expr '-' eln . expr   (rule 7)

    INT 	shift, and go to state 1
    SELF	shift, and go to state 6
    SUPER	shift, and go to state 7
    ID_CAP	shift, and go to state 9
    ID_LOW	shift, and go to state 10
    ID_FUNC	shift, and go to state 11
    ID_VAR_FIELD	shift, and go to state 12
    '-' 	shift, and go to state 13
    '(' 	shift, and go to state 14

    id  	go to state 15
    expr	go to state 86
    var_id	go to state 17
    var_id_simple	go to state 18
    method_call	go to state 22
    method_id	go to state 24



state 63

    expr  ->  expr '+' eln . expr   (rule 6)

    INT 	shift, and go to state 1
    SELF	shift, and go to state 6
    SUPER	shift, and go to state 7
    ID_CAP	shift, and go to state 9
    ID_LOW	shift, and go to state 10
    ID_FUNC	shift, and go to state 11
    ID_VAR_FIELD	shift, and go to state 12
    '-' 	shift, and go to state 13
    '(' 	shift, and go to state 14

    id  	go to state 15
    expr	go to state 87
    var_id	go to state 17
    var_id_simple	go to state 18
    method_call	go to state 22
    method_id	go to state 24



state 64

    expr  ->  expr '*' eln . expr   (rule 8)

    INT 	shift, and go to state 1
    SELF	shift, and go to state 6
    SUPER	shift, and go to state 7
    ID_CAP	shift, and go to state 9
    ID_LOW	shift, and go to state 10
    ID_FUNC	shift, and go to state 11
    ID_VAR_FIELD	shift, and go to state 12
    '-' 	shift, and go to state 13
    '(' 	shift, and go to state 14

    id  	go to state 15
    expr	go to state 88
    var_id	go to state 17
    var_id_simple	go to state 18
    method_call	go to state 22
    method_id	go to state 24



state 65

    expr  ->  expr '/' eln . expr   (rule 9)

    INT 	shift, and go to state 1
    SELF	shift, and go to state 6
    SUPER	shift, and go to state 7
    ID_CAP	shift, and go to state 9
    ID_LOW	shift, and go to state 10
    ID_FUNC	shift, and go to state 11
    ID_VAR_FIELD	shift, and go to state 12
    '-' 	shift, and go to state 13
    '(' 	shift, and go to state 14

    id  	go to state 15
    expr	go to state 89
    var_id	go to state 17
    var_id_simple	go to state 18
    method_call	go to state 22
    method_id	go to state 24



state 66

    expr  ->  expr '<' eln . expr   (rule 10)

    INT 	shift, and go to state 1
    SELF	shift, and go to state 6
    SUPER	shift, and go to state 7
    ID_CAP	shift, and go to state 9
    ID_LOW	shift, and go to state 10
    ID_FUNC	shift, and go to state 11
    ID_VAR_FIELD	shift, and go to state 12
    '-' 	shift, and go to state 13
    '(' 	shift, and go to state 14

    id  	go to state 15
    expr	go to state 90
    var_id	go to state 17
    var_id_simple	go to state 18
    method_call	go to state 22
    method_id	go to state 24



state 67

    expr  ->  expr '>' eln . expr   (rule 11)

    INT 	shift, and go to state 1
    SELF	shift, and go to state 6
    SUPER	shift, and go to state 7
    ID_CAP	shift, and go to state 9
    ID_LOW	shift, and go to state 10
    ID_FUNC	shift, and go to state 11
    ID_VAR_FIELD	shift, and go to state 12
    '-' 	shift, and go to state 13
    '(' 	shift, and go to state 14

    id  	go to state 15
    expr	go to state 91
    var_id	go to state 17
    var_id_simple	go to state 18
    method_call	go to state 22
    method_id	go to state 24



state 68

    expr  ->  expr '=' eln . expr   (rule 13)

    INT 	shift, and go to state 1
    SELF	shift, and go to state 6
    SUPER	shift, and go to state 7
    ID_CAP	shift, and go to state 9
    ID_LOW	shift, and go to state 10
    ID_FUNC	shift, and go to state 11
    ID_VAR_FIELD	shift, and go to state 12
    '-' 	shift, and go to state 13
    '(' 	shift, and go to state 14

    id  	go to state 15
    expr	go to state 92
    var_id	go to state 17
    var_id_simple	go to state 18
    method_call	go to state 22
    method_id	go to state 24



state 69

    var_id_simple  ->  id .   (rule 22)

    $default	reduce using rule 22 (var_id_simple)



state 70

    var_id  ->  var_id '.' var_id_simple .   (rule 21)

    $default	reduce using rule 21 (var_id)



state 71

    stmt_seqE  ->  stmt_seq EOL stmt .   (rule 37)

    $default	reduce using rule 37 (stmt_seqE)



state 72

    expr_seqE  ->  expr_seq . ',' expr   (rule 27)
    method_call  ->  method_id '(' expr_seq . ')'   (rule 38)

    ')' 	shift, and go to state 93
    ',' 	shift, and go to state 57



state 73

    method_def_param_seqE  ->  ID_LOW .   (rule 47)

    $default	reduce using rule 47 (method_def_param_seqE)



state 74

    method_def  ->  DEF eln method_id '(' . method_def_param_seq eln ')' eln stmt_seq eln END   (rule 40)

    ID_LOW	shift, and go to state 73

    $default	reduce using rule 45 (method_def_param_seq)

    method_def_param_seq	go to state 94
    method_def_param_seqE	go to state 76



state 75

    method_def  ->  DEF eln method_id method_def_param_seq . EOL stmt_seq eln END   (rule 41)
    method_def_param_seqE  ->  method_def_param_seq . ',' eln ID_LOW   (rule 48)

    EOL 	shift, and go to state 95
    ',' 	shift, and go to state 96



state 76

    method_def_param_seq  ->  method_def_param_seqE .   (rule 46)

    $default	reduce using rule 46 (method_def_param_seq)



state 77

    expr  ->  '(' eln . expr eln ')'   (rule 15)
    while_stmt  ->  WHILE eln '(' eln . expr eln ')' EOL stmt_seq eln END   (rule 50)

    INT 	shift, and go to state 1
    SELF	shift, and go to state 6
    SUPER	shift, and go to state 7
    ID_CAP	shift, and go to state 9
    ID_LOW	shift, and go to state 10
    ID_FUNC	shift, and go to state 11
    ID_VAR_FIELD	shift, and go to state 12
    '-' 	shift, and go to state 13
    '(' 	shift, and go to state 14

    id  	go to state 15
    expr	go to state 97
    var_id	go to state 17
    var_id_simple	go to state 18
    method_call	go to state 22
    method_id	go to state 24



state 78

    while_stmt  ->  WHILE eln expr DO . eln stmt_seq eln END   (rule 49)

    EOL 	shift, and go to state 28

    EOL 	[reduce using rule 2 (eln)]
    $default	reduce using rule 2 (eln)

    eln 	go to state 98



state 79

    expr  ->  '(' eln . expr eln ')'   (rule 15)
    until_stmt  ->  UNTIL eln '(' eln . expr eln ')' EOL stmt_seq eln END   (rule 52)

    INT 	shift, and go to state 1
    SELF	shift, and go to state 6
    SUPER	shift, and go to state 7
    ID_CAP	shift, and go to state 9
    ID_LOW	shift, and go to state 10
    ID_FUNC	shift, and go to state 11
    ID_VAR_FIELD	shift, and go to state 12
    '-' 	shift, and go to state 13
    '(' 	shift, and go to state 14

    id  	go to state 15
    expr	go to state 99
    var_id	go to state 17
    var_id_simple	go to state 18
    method_call	go to state 22
    method_id	go to state 24



state 80

    until_stmt  ->  UNTIL eln expr DO . eln stmt_seq eln END   (rule 51)

    EOL 	shift, and go to state 28

    EOL 	[reduce using rule 2 (eln)]
    $default	reduce using rule 2 (eln)

    eln 	go to state 100



state 81

    class_def  ->  CLASS eln ID_CAP EOL . stmt_seq eln END   (rule 54)

    INT 	shift, and go to state 1
    DEF 	shift, and go to state 2
    WHILE	shift, and go to state 3
    UNTIL	shift, and go to state 4
    CLASS	shift, and go to state 5
    SELF	shift, and go to state 6
    SUPER	shift, and go to state 7
    RETURN	shift, and go to state 8
    ID_CAP	shift, and go to state 9
    ID_LOW	shift, and go to state 10
    ID_FUNC	shift, and go to state 11
    ID_VAR_FIELD	shift, and go to state 12
    '-' 	shift, and go to state 13
    '(' 	shift, and go to state 14

    $default	reduce using rule 34 (stmt_seq)

    id  	go to state 15
    expr	go to state 16
    var_id	go to state 17
    var_id_simple	go to state 18
    stmt	go to state 19
    stmt_seq	go to state 101
    stmt_seqE	go to state 21
    method_call	go to state 22
    method_def	go to state 23
    method_id	go to state 24
    while_stmt	go to state 25
    until_stmt	go to state 26
    class_def	go to state 27



state 82

    class_def  ->  CLASS eln ID_CAP '<' . eln ID_CAP EOL stmt_seq eln END   (rule 53)

    EOL 	shift, and go to state 28

    $default	reduce using rule 2 (eln)

    eln 	go to state 102



state 83

    expr  ->  expr . '+' eln expr   (rule 6)
    expr  ->  expr . '-' eln expr   (rule 7)
    expr  ->  expr . '*' eln expr   (rule 8)
    expr  ->  expr . '/' eln expr   (rule 9)
    expr  ->  expr . '<' eln expr   (rule 10)
    expr  ->  expr . '>' eln expr   (rule 11)
    expr  ->  expr . EQUAL eln expr   (rule 12)
    expr  ->  expr . '=' eln expr   (rule 13)
    expr_seqE  ->  expr_seq ',' expr .   (rule 27)

    EQUAL	shift, and go to state 39
    '-' 	shift, and go to state 40
    '+' 	shift, and go to state 41
    '*' 	shift, and go to state 42
    '/' 	shift, and go to state 43
    '<' 	shift, and go to state 44
    '>' 	shift, and go to state 45
    '=' 	shift, and go to state 46

    $default	reduce using rule 27 (expr_seqE)



state 84

    expr  ->  '(' eln expr eln . ')'   (rule 15)

    ')' 	shift, and go to state 103



state 85

    expr  ->  expr . '+' eln expr   (rule 6)
    expr  ->  expr . '-' eln expr   (rule 7)
    expr  ->  expr . '*' eln expr   (rule 8)
    expr  ->  expr . '/' eln expr   (rule 9)
    expr  ->  expr . '<' eln expr   (rule 10)
    expr  ->  expr . '>' eln expr   (rule 11)
    expr  ->  expr . EQUAL eln expr   (rule 12)
    expr  ->  expr EQUAL eln expr .   (rule 12)
    expr  ->  expr . '=' eln expr   (rule 13)

    EQUAL	shift, and go to state 39
    '-' 	shift, and go to state 40
    '+' 	shift, and go to state 41
    '*' 	shift, and go to state 42
    '/' 	shift, and go to state 43
    '<' 	shift, and go to state 44
    '>' 	shift, and go to state 45
    '=' 	shift, and go to state 46

    EQUAL	[reduce using rule 12 (expr)]
    '-' 	[reduce using rule 12 (expr)]
    '+' 	[reduce using rule 12 (expr)]
    '*' 	[reduce using rule 12 (expr)]
    '/' 	[reduce using rule 12 (expr)]
    '<' 	[reduce using rule 12 (expr)]
    '>' 	[reduce using rule 12 (expr)]
    '=' 	[reduce using rule 12 (expr)]
    $default	reduce using rule 12 (expr)



state 86

    expr  ->  expr . '+' eln expr   (rule 6)
    expr  ->  expr . '-' eln expr   (rule 7)
    expr  ->  expr '-' eln expr .   (rule 7)
    expr  ->  expr . '*' eln expr   (rule 8)
    expr  ->  expr . '/' eln expr   (rule 9)
    expr  ->  expr . '<' eln expr   (rule 10)
    expr  ->  expr . '>' eln expr   (rule 11)
    expr  ->  expr . EQUAL eln expr   (rule 12)
    expr  ->  expr . '=' eln expr   (rule 13)

    EQUAL	shift, and go to state 39
    '*' 	shift, and go to state 42
    '/' 	shift, and go to state 43
    '<' 	shift, and go to state 44
    '>' 	shift, and go to state 45
    '=' 	shift, and go to state 46

    EQUAL	[reduce using rule 7 (expr)]
    '<' 	[reduce using rule 7 (expr)]
    '>' 	[reduce using rule 7 (expr)]
    '=' 	[reduce using rule 7 (expr)]
    $default	reduce using rule 7 (expr)



state 87

    expr  ->  expr . '+' eln expr   (rule 6)
    expr  ->  expr '+' eln expr .   (rule 6)
    expr  ->  expr . '-' eln expr   (rule 7)
    expr  ->  expr . '*' eln expr   (rule 8)
    expr  ->  expr . '/' eln expr   (rule 9)
    expr  ->  expr . '<' eln expr   (rule 10)
    expr  ->  expr . '>' eln expr   (rule 11)
    expr  ->  expr . EQUAL eln expr   (rule 12)
    expr  ->  expr . '=' eln expr   (rule 13)

    EQUAL	shift, and go to state 39
    '*' 	shift, and go to state 42
    '/' 	shift, and go to state 43
    '<' 	shift, and go to state 44
    '>' 	shift, and go to state 45
    '=' 	shift, and go to state 46

    EQUAL	[reduce using rule 6 (expr)]
    '<' 	[reduce using rule 6 (expr)]
    '>' 	[reduce using rule 6 (expr)]
    '=' 	[reduce using rule 6 (expr)]
    $default	reduce using rule 6 (expr)



state 88

    expr  ->  expr . '+' eln expr   (rule 6)
    expr  ->  expr . '-' eln expr   (rule 7)
    expr  ->  expr . '*' eln expr   (rule 8)
    expr  ->  expr '*' eln expr .   (rule 8)
    expr  ->  expr . '/' eln expr   (rule 9)
    expr  ->  expr . '<' eln expr   (rule 10)
    expr  ->  expr . '>' eln expr   (rule 11)
    expr  ->  expr . EQUAL eln expr   (rule 12)
    expr  ->  expr . '=' eln expr   (rule 13)

    EQUAL	shift, and go to state 39
    '<' 	shift, and go to state 44
    '>' 	shift, and go to state 45
    '=' 	shift, and go to state 46

    EQUAL	[reduce using rule 8 (expr)]
    '<' 	[reduce using rule 8 (expr)]
    '>' 	[reduce using rule 8 (expr)]
    '=' 	[reduce using rule 8 (expr)]
    $default	reduce using rule 8 (expr)



state 89

    expr  ->  expr . '+' eln expr   (rule 6)
    expr  ->  expr . '-' eln expr   (rule 7)
    expr  ->  expr . '*' eln expr   (rule 8)
    expr  ->  expr . '/' eln expr   (rule 9)
    expr  ->  expr '/' eln expr .   (rule 9)
    expr  ->  expr . '<' eln expr   (rule 10)
    expr  ->  expr . '>' eln expr   (rule 11)
    expr  ->  expr . EQUAL eln expr   (rule 12)
    expr  ->  expr . '=' eln expr   (rule 13)

    EQUAL	shift, and go to state 39
    '<' 	shift, and go to state 44
    '>' 	shift, and go to state 45
    '=' 	shift, and go to state 46

    EQUAL	[reduce using rule 9 (expr)]
    '<' 	[reduce using rule 9 (expr)]
    '>' 	[reduce using rule 9 (expr)]
    '=' 	[reduce using rule 9 (expr)]
    $default	reduce using rule 9 (expr)



state 90

    expr  ->  expr . '+' eln expr   (rule 6)
    expr  ->  expr . '-' eln expr   (rule 7)
    expr  ->  expr . '*' eln expr   (rule 8)
    expr  ->  expr . '/' eln expr   (rule 9)
    expr  ->  expr . '<' eln expr   (rule 10)
    expr  ->  expr '<' eln expr .   (rule 10)
    expr  ->  expr . '>' eln expr   (rule 11)
    expr  ->  expr . EQUAL eln expr   (rule 12)
    expr  ->  expr . '=' eln expr   (rule 13)

    EQUAL	shift, and go to state 39
    '-' 	shift, and go to state 40
    '+' 	shift, and go to state 41
    '*' 	shift, and go to state 42
    '/' 	shift, and go to state 43
    '<' 	shift, and go to state 44
    '>' 	shift, and go to state 45
    '=' 	shift, and go to state 46

    EQUAL	[reduce using rule 10 (expr)]
    '-' 	[reduce using rule 10 (expr)]
    '+' 	[reduce using rule 10 (expr)]
    '*' 	[reduce using rule 10 (expr)]
    '/' 	[reduce using rule 10 (expr)]
    '<' 	[reduce using rule 10 (expr)]
    '>' 	[reduce using rule 10 (expr)]
    '=' 	[reduce using rule 10 (expr)]
    $default	reduce using rule 10 (expr)



state 91

    expr  ->  expr . '+' eln expr   (rule 6)
    expr  ->  expr . '-' eln expr   (rule 7)
    expr  ->  expr . '*' eln expr   (rule 8)
    expr  ->  expr . '/' eln expr   (rule 9)
    expr  ->  expr . '<' eln expr   (rule 10)
    expr  ->  expr . '>' eln expr   (rule 11)
    expr  ->  expr '>' eln expr .   (rule 11)
    expr  ->  expr . EQUAL eln expr   (rule 12)
    expr  ->  expr . '=' eln expr   (rule 13)

    EQUAL	shift, and go to state 39
    '-' 	shift, and go to state 40
    '+' 	shift, and go to state 41
    '*' 	shift, and go to state 42
    '/' 	shift, and go to state 43
    '<' 	shift, and go to state 44
    '>' 	shift, and go to state 45
    '=' 	shift, and go to state 46

    EQUAL	[reduce using rule 11 (expr)]
    '-' 	[reduce using rule 11 (expr)]
    '+' 	[reduce using rule 11 (expr)]
    '*' 	[reduce using rule 11 (expr)]
    '/' 	[reduce using rule 11 (expr)]
    '<' 	[reduce using rule 11 (expr)]
    '>' 	[reduce using rule 11 (expr)]
    '=' 	[reduce using rule 11 (expr)]
    $default	reduce using rule 11 (expr)



state 92

    expr  ->  expr . '+' eln expr   (rule 6)
    expr  ->  expr . '-' eln expr   (rule 7)
    expr  ->  expr . '*' eln expr   (rule 8)
    expr  ->  expr . '/' eln expr   (rule 9)
    expr  ->  expr . '<' eln expr   (rule 10)
    expr  ->  expr . '>' eln expr   (rule 11)
    expr  ->  expr . EQUAL eln expr   (rule 12)
    expr  ->  expr . '=' eln expr   (rule 13)
    expr  ->  expr '=' eln expr .   (rule 13)

    EQUAL	shift, and go to state 39
    '-' 	shift, and go to state 40
    '+' 	shift, and go to state 41
    '*' 	shift, and go to state 42
    '/' 	shift, and go to state 43
    '<' 	shift, and go to state 44
    '>' 	shift, and go to state 45
    '=' 	shift, and go to state 46

    EQUAL	[reduce using rule 13 (expr)]
    '-' 	[reduce using rule 13 (expr)]
    '+' 	[reduce using rule 13 (expr)]
    '*' 	[reduce using rule 13 (expr)]
    '/' 	[reduce using rule 13 (expr)]
    '<' 	[reduce using rule 13 (expr)]
    '>' 	[reduce using rule 13 (expr)]
    '=' 	[reduce using rule 13 (expr)]
    $default	reduce using rule 13 (expr)



state 93

    method_call  ->  method_id '(' expr_seq ')' .   (rule 38)

    $default	reduce using rule 38 (method_call)



state 94

    method_def  ->  DEF eln method_id '(' method_def_param_seq . eln ')' eln stmt_seq eln END   (rule 40)
    method_def_param_seqE  ->  method_def_param_seq . ',' eln ID_LOW   (rule 48)

    EOL 	shift, and go to state 28
    ',' 	shift, and go to state 96

    $default	reduce using rule 2 (eln)

    eln 	go to state 104



state 95

    method_def  ->  DEF eln method_id method_def_param_seq EOL . stmt_seq eln END   (rule 41)

    INT 	shift, and go to state 1
    DEF 	shift, and go to state 2
    WHILE	shift, and go to state 3
    UNTIL	shift, and go to state 4
    CLASS	shift, and go to state 5
    SELF	shift, and go to state 6
    SUPER	shift, and go to state 7
    RETURN	shift, and go to state 8
    ID_CAP	shift, and go to state 9
    ID_LOW	shift, and go to state 10
    ID_FUNC	shift, and go to state 11
    ID_VAR_FIELD	shift, and go to state 12
    '-' 	shift, and go to state 13
    '(' 	shift, and go to state 14

    $default	reduce using rule 34 (stmt_seq)

    id  	go to state 15
    expr	go to state 16
    var_id	go to state 17
    var_id_simple	go to state 18
    stmt	go to state 19
    stmt_seq	go to state 105
    stmt_seqE	go to state 21
    method_call	go to state 22
    method_def	go to state 23
    method_id	go to state 24
    while_stmt	go to state 25
    until_stmt	go to state 26
    class_def	go to state 27



state 96

    method_def_param_seqE  ->  method_def_param_seq ',' . eln ID_LOW   (rule 48)

    EOL 	shift, and go to state 28

    $default	reduce using rule 2 (eln)

    eln 	go to state 106



state 97

    expr  ->  expr . '+' eln expr   (rule 6)
    expr  ->  expr . '-' eln expr   (rule 7)
    expr  ->  expr . '*' eln expr   (rule 8)
    expr  ->  expr . '/' eln expr   (rule 9)
    expr  ->  expr . '<' eln expr   (rule 10)
    expr  ->  expr . '>' eln expr   (rule 11)
    expr  ->  expr . EQUAL eln expr   (rule 12)
    expr  ->  expr . '=' eln expr   (rule 13)
    expr  ->  '(' eln expr . eln ')'   (rule 15)
    while_stmt  ->  WHILE eln '(' eln expr . eln ')' EOL stmt_seq eln END   (rule 50)

    EOL 	shift, and go to state 28
    EQUAL	shift, and go to state 39
    '-' 	shift, and go to state 40
    '+' 	shift, and go to state 41
    '*' 	shift, and go to state 42
    '/' 	shift, and go to state 43
    '<' 	shift, and go to state 44
    '>' 	shift, and go to state 45
    '=' 	shift, and go to state 46

    $default	reduce using rule 2 (eln)

    eln 	go to state 107



state 98

    while_stmt  ->  WHILE eln expr DO eln . stmt_seq eln END   (rule 49)

    INT 	shift, and go to state 1
    DEF 	shift, and go to state 2
    WHILE	shift, and go to state 3
    UNTIL	shift, and go to state 4
    CLASS	shift, and go to state 5
    SELF	shift, and go to state 6
    SUPER	shift, and go to state 7
    RETURN	shift, and go to state 8
    ID_CAP	shift, and go to state 9
    ID_LOW	shift, and go to state 10
    ID_FUNC	shift, and go to state 11
    ID_VAR_FIELD	shift, and go to state 12
    '-' 	shift, and go to state 13
    '(' 	shift, and go to state 14

    $default	reduce using rule 34 (stmt_seq)

    id  	go to state 15
    expr	go to state 16
    var_id	go to state 17
    var_id_simple	go to state 18
    stmt	go to state 19
    stmt_seq	go to state 108
    stmt_seqE	go to state 21
    method_call	go to state 22
    method_def	go to state 23
    method_id	go to state 24
    while_stmt	go to state 25
    until_stmt	go to state 26
    class_def	go to state 27



state 99

    expr  ->  expr . '+' eln expr   (rule 6)
    expr  ->  expr . '-' eln expr   (rule 7)
    expr  ->  expr . '*' eln expr   (rule 8)
    expr  ->  expr . '/' eln expr   (rule 9)
    expr  ->  expr . '<' eln expr   (rule 10)
    expr  ->  expr . '>' eln expr   (rule 11)
    expr  ->  expr . EQUAL eln expr   (rule 12)
    expr  ->  expr . '=' eln expr   (rule 13)
    expr  ->  '(' eln expr . eln ')'   (rule 15)
    until_stmt  ->  UNTIL eln '(' eln expr . eln ')' EOL stmt_seq eln END   (rule 52)

    EOL 	shift, and go to state 28
    EQUAL	shift, and go to state 39
    '-' 	shift, and go to state 40
    '+' 	shift, and go to state 41
    '*' 	shift, and go to state 42
    '/' 	shift, and go to state 43
    '<' 	shift, and go to state 44
    '>' 	shift, and go to state 45
    '=' 	shift, and go to state 46

    $default	reduce using rule 2 (eln)

    eln 	go to state 109



state 100

    until_stmt  ->  UNTIL eln expr DO eln . stmt_seq eln END   (rule 51)

    INT 	shift, and go to state 1
    DEF 	shift, and go to state 2
    WHILE	shift, and go to state 3
    UNTIL	shift, and go to state 4
    CLASS	shift, and go to state 5
    SELF	shift, and go to state 6
    SUPER	shift, and go to state 7
    RETURN	shift, and go to state 8
    ID_CAP	shift, and go to state 9
    ID_LOW	shift, and go to state 10
    ID_FUNC	shift, and go to state 11
    ID_VAR_FIELD	shift, and go to state 12
    '-' 	shift, and go to state 13
    '(' 	shift, and go to state 14

    $default	reduce using rule 34 (stmt_seq)

    id  	go to state 15
    expr	go to state 16
    var_id	go to state 17
    var_id_simple	go to state 18
    stmt	go to state 19
    stmt_seq	go to state 110
    stmt_seqE	go to state 21
    method_call	go to state 22
    method_def	go to state 23
    method_id	go to state 24
    while_stmt	go to state 25
    until_stmt	go to state 26
    class_def	go to state 27



state 101

    stmt_seqE  ->  stmt_seq . EOL stmt   (rule 37)
    class_def  ->  CLASS eln ID_CAP EOL stmt_seq . eln END   (rule 54)

    EOL 	shift, and go to state 111

    $default	reduce using rule 2 (eln)

    eln 	go to state 112



state 102

    class_def  ->  CLASS eln ID_CAP '<' eln . ID_CAP EOL stmt_seq eln END   (rule 53)

    ID_CAP	shift, and go to state 113



state 103

    expr  ->  '(' eln expr eln ')' .   (rule 15)

    $default	reduce using rule 15 (expr)



state 104

    method_def  ->  DEF eln method_id '(' method_def_param_seq eln . ')' eln stmt_seq eln END   (rule 40)

    ')' 	shift, and go to state 114



state 105

    stmt_seqE  ->  stmt_seq . EOL stmt   (rule 37)
    method_def  ->  DEF eln method_id method_def_param_seq EOL stmt_seq . eln END   (rule 41)

    EOL 	shift, and go to state 111

    $default	reduce using rule 2 (eln)

    eln 	go to state 115



state 106

    method_def_param_seqE  ->  method_def_param_seq ',' eln . ID_LOW   (rule 48)

    ID_LOW	shift, and go to state 116



state 107

    expr  ->  '(' eln expr eln . ')'   (rule 15)
    while_stmt  ->  WHILE eln '(' eln expr eln . ')' EOL stmt_seq eln END   (rule 50)

    ')' 	shift, and go to state 117



state 108

    stmt_seqE  ->  stmt_seq . EOL stmt   (rule 37)
    while_stmt  ->  WHILE eln expr DO eln stmt_seq . eln END   (rule 49)

    EOL 	shift, and go to state 111

    $default	reduce using rule 2 (eln)

    eln 	go to state 118



state 109

    expr  ->  '(' eln expr eln . ')'   (rule 15)
    until_stmt  ->  UNTIL eln '(' eln expr eln . ')' EOL stmt_seq eln END   (rule 52)

    ')' 	shift, and go to state 119



state 110

    stmt_seqE  ->  stmt_seq . EOL stmt   (rule 37)
    until_stmt  ->  UNTIL eln expr DO eln stmt_seq . eln END   (rule 51)

    EOL 	shift, and go to state 111

    $default	reduce using rule 2 (eln)

    eln 	go to state 120



state 111

    eln  ->  EOL .   (rule 3)
    stmt_seqE  ->  stmt_seq EOL . stmt   (rule 37)

    INT 	shift, and go to state 1
    DEF 	shift, and go to state 2
    WHILE	shift, and go to state 3
    UNTIL	shift, and go to state 4
    CLASS	shift, and go to state 5
    SELF	shift, and go to state 6
    SUPER	shift, and go to state 7
    RETURN	shift, and go to state 8
    ID_CAP	shift, and go to state 9
    ID_LOW	shift, and go to state 10
    ID_FUNC	shift, and go to state 11
    ID_VAR_FIELD	shift, and go to state 12
    '-' 	shift, and go to state 13
    '(' 	shift, and go to state 14

    $default	reduce using rule 3 (eln)

    id  	go to state 15
    expr	go to state 16
    var_id	go to state 17
    var_id_simple	go to state 18
    stmt	go to state 71
    method_call	go to state 22
    method_def	go to state 23
    method_id	go to state 24
    while_stmt	go to state 25
    until_stmt	go to state 26
    class_def	go to state 27



state 112

    class_def  ->  CLASS eln ID_CAP EOL stmt_seq eln . END   (rule 54)

    END 	shift, and go to state 121



state 113

    class_def  ->  CLASS eln ID_CAP '<' eln ID_CAP . EOL stmt_seq eln END   (rule 53)

    EOL 	shift, and go to state 122



state 114

    method_def  ->  DEF eln method_id '(' method_def_param_seq eln ')' . eln stmt_seq eln END   (rule 40)

    EOL 	shift, and go to state 28

    EOL 	[reduce using rule 2 (eln)]
    $default	reduce using rule 2 (eln)

    eln 	go to state 123



state 115

    method_def  ->  DEF eln method_id method_def_param_seq EOL stmt_seq eln . END   (rule 41)

    END 	shift, and go to state 124



state 116

    method_def_param_seqE  ->  method_def_param_seq ',' eln ID_LOW .   (rule 48)

    $default	reduce using rule 48 (method_def_param_seqE)



state 117

    expr  ->  '(' eln expr eln ')' .   (rule 15)
    while_stmt  ->  WHILE eln '(' eln expr eln ')' . EOL stmt_seq eln END   (rule 50)

    EOL 	shift, and go to state 125

    $default	reduce using rule 15 (expr)



state 118

    while_stmt  ->  WHILE eln expr DO eln stmt_seq eln . END   (rule 49)

    END 	shift, and go to state 126



state 119

    expr  ->  '(' eln expr eln ')' .   (rule 15)
    until_stmt  ->  UNTIL eln '(' eln expr eln ')' . EOL stmt_seq eln END   (rule 52)

    EOL 	shift, and go to state 127

    $default	reduce using rule 15 (expr)



state 120

    until_stmt  ->  UNTIL eln expr DO eln stmt_seq eln . END   (rule 51)

    END 	shift, and go to state 128



state 121

    class_def  ->  CLASS eln ID_CAP EOL stmt_seq eln END .   (rule 54)

    $default	reduce using rule 54 (class_def)



state 122

    class_def  ->  CLASS eln ID_CAP '<' eln ID_CAP EOL . stmt_seq eln END   (rule 53)

    INT 	shift, and go to state 1
    DEF 	shift, and go to state 2
    WHILE	shift, and go to state 3
    UNTIL	shift, and go to state 4
    CLASS	shift, and go to state 5
    SELF	shift, and go to state 6
    SUPER	shift, and go to state 7
    RETURN	shift, and go to state 8
    ID_CAP	shift, and go to state 9
    ID_LOW	shift, and go to state 10
    ID_FUNC	shift, and go to state 11
    ID_VAR_FIELD	shift, and go to state 12
    '-' 	shift, and go to state 13
    '(' 	shift, and go to state 14

    $default	reduce using rule 34 (stmt_seq)

    id  	go to state 15
    expr	go to state 16
    var_id	go to state 17
    var_id_simple	go to state 18
    stmt	go to state 19
    stmt_seq	go to state 129
    stmt_seqE	go to state 21
    method_call	go to state 22
    method_def	go to state 23
    method_id	go to state 24
    while_stmt	go to state 25
    until_stmt	go to state 26
    class_def	go to state 27



state 123

    method_def  ->  DEF eln method_id '(' method_def_param_seq eln ')' eln . stmt_seq eln END   (rule 40)

    INT 	shift, and go to state 1
    DEF 	shift, and go to state 2
    WHILE	shift, and go to state 3
    UNTIL	shift, and go to state 4
    CLASS	shift, and go to state 5
    SELF	shift, and go to state 6
    SUPER	shift, and go to state 7
    RETURN	shift, and go to state 8
    ID_CAP	shift, and go to state 9
    ID_LOW	shift, and go to state 10
    ID_FUNC	shift, and go to state 11
    ID_VAR_FIELD	shift, and go to state 12
    '-' 	shift, and go to state 13
    '(' 	shift, and go to state 14

    $default	reduce using rule 34 (stmt_seq)

    id  	go to state 15
    expr	go to state 16
    var_id	go to state 17
    var_id_simple	go to state 18
    stmt	go to state 19
    stmt_seq	go to state 130
    stmt_seqE	go to state 21
    method_call	go to state 22
    method_def	go to state 23
    method_id	go to state 24
    while_stmt	go to state 25
    until_stmt	go to state 26
    class_def	go to state 27



state 124

    method_def  ->  DEF eln method_id method_def_param_seq EOL stmt_seq eln END .   (rule 41)

    $default	reduce using rule 41 (method_def)



state 125

    while_stmt  ->  WHILE eln '(' eln expr eln ')' EOL . stmt_seq eln END   (rule 50)

    INT 	shift, and go to state 1
    DEF 	shift, and go to state 2
    WHILE	shift, and go to state 3
    UNTIL	shift, and go to state 4
    CLASS	shift, and go to state 5
    SELF	shift, and go to state 6
    SUPER	shift, and go to state 7
    RETURN	shift, and go to state 8
    ID_CAP	shift, and go to state 9
    ID_LOW	shift, and go to state 10
    ID_FUNC	shift, and go to state 11
    ID_VAR_FIELD	shift, and go to state 12
    '-' 	shift, and go to state 13
    '(' 	shift, and go to state 14

    $default	reduce using rule 34 (stmt_seq)

    id  	go to state 15
    expr	go to state 16
    var_id	go to state 17
    var_id_simple	go to state 18
    stmt	go to state 19
    stmt_seq	go to state 131
    stmt_seqE	go to state 21
    method_call	go to state 22
    method_def	go to state 23
    method_id	go to state 24
    while_stmt	go to state 25
    until_stmt	go to state 26
    class_def	go to state 27



state 126

    while_stmt  ->  WHILE eln expr DO eln stmt_seq eln END .   (rule 49)

    $default	reduce using rule 49 (while_stmt)



state 127

    until_stmt  ->  UNTIL eln '(' eln expr eln ')' EOL . stmt_seq eln END   (rule 52)

    INT 	shift, and go to state 1
    DEF 	shift, and go to state 2
    WHILE	shift, and go to state 3
    UNTIL	shift, and go to state 4
    CLASS	shift, and go to state 5
    SELF	shift, and go to state 6
    SUPER	shift, and go to state 7
    RETURN	shift, and go to state 8
    ID_CAP	shift, and go to state 9
    ID_LOW	shift, and go to state 10
    ID_FUNC	shift, and go to state 11
    ID_VAR_FIELD	shift, and go to state 12
    '-' 	shift, and go to state 13
    '(' 	shift, and go to state 14

    $default	reduce using rule 34 (stmt_seq)

    id  	go to state 15
    expr	go to state 16
    var_id	go to state 17
    var_id_simple	go to state 18
    stmt	go to state 19
    stmt_seq	go to state 132
    stmt_seqE	go to state 21
    method_call	go to state 22
    method_def	go to state 23
    method_id	go to state 24
    while_stmt	go to state 25
    until_stmt	go to state 26
    class_def	go to state 27



state 128

    until_stmt  ->  UNTIL eln expr DO eln stmt_seq eln END .   (rule 51)

    $default	reduce using rule 51 (until_stmt)



state 129

    stmt_seqE  ->  stmt_seq . EOL stmt   (rule 37)
    class_def  ->  CLASS eln ID_CAP '<' eln ID_CAP EOL stmt_seq . eln END   (rule 53)

    EOL 	shift, and go to state 111

    $default	reduce using rule 2 (eln)

    eln 	go to state 133



state 130

    stmt_seqE  ->  stmt_seq . EOL stmt   (rule 37)
    method_def  ->  DEF eln method_id '(' method_def_param_seq eln ')' eln stmt_seq . eln END   (rule 40)

    EOL 	shift, and go to state 111

    $default	reduce using rule 2 (eln)

    eln 	go to state 134



state 131

    stmt_seqE  ->  stmt_seq . EOL stmt   (rule 37)
    while_stmt  ->  WHILE eln '(' eln expr eln ')' EOL stmt_seq . eln END   (rule 50)

    EOL 	shift, and go to state 111

    $default	reduce using rule 2 (eln)

    eln 	go to state 135



state 132

    stmt_seqE  ->  stmt_seq . EOL stmt   (rule 37)
    until_stmt  ->  UNTIL eln '(' eln expr eln ')' EOL stmt_seq . eln END   (rule 52)

    EOL 	shift, and go to state 111

    $default	reduce using rule 2 (eln)

    eln 	go to state 136



state 133

    class_def  ->  CLASS eln ID_CAP '<' eln ID_CAP EOL stmt_seq eln . END   (rule 53)

    END 	shift, and go to state 137



state 134

    method_def  ->  DEF eln method_id '(' method_def_param_seq eln ')' eln stmt_seq eln . END   (rule 40)

    END 	shift, and go to state 138



state 135

    while_stmt  ->  WHILE eln '(' eln expr eln ')' EOL stmt_seq eln . END   (rule 50)

    END 	shift, and go to state 139



state 136

    until_stmt  ->  UNTIL eln '(' eln expr eln ')' EOL stmt_seq eln . END   (rule 52)

    END 	shift, and go to state 140



state 137

    class_def  ->  CLASS eln ID_CAP '<' eln ID_CAP EOL stmt_seq eln END .   (rule 53)

    $default	reduce using rule 53 (class_def)



state 138

    method_def  ->  DEF eln method_id '(' method_def_param_seq eln ')' eln stmt_seq eln END .   (rule 40)

    $default	reduce using rule 40 (method_def)



state 139

    while_stmt  ->  WHILE eln '(' eln expr eln ')' EOL stmt_seq eln END .   (rule 50)

    $default	reduce using rule 50 (while_stmt)



state 140

    until_stmt  ->  UNTIL eln '(' eln expr eln ')' EOL stmt_seq eln END .   (rule 52)

    $default	reduce using rule 52 (until_stmt)



state 141

    $   	go to state 142



state 142

    $   	go to state 143



state 143

    $default	accept
